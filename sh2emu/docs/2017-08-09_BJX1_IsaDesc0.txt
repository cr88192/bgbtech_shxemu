Instructions By Name and Description

== Integer Base ISA ==

This section will cover basic integer instructions.


Normal instructions will be 16 bit, and are expressed here as nibbles.
* 0..9, A..F: Expresses a literal hex value.
* m: Expresses a source register.
* n: Expresses a destination register.
* M: Expresses a source register as 0-7 with high-bit set.
* N: Expresses a destination register as 0-7 with high-bit set.
* d: Expresses a displacement.
* i: Expresses an immediate value (signed)
* j: Expresses an immediate value (unsigned)

Displacements:
* Are normally scaled by the size of the data type.
* disp4, disp8, and disp12 are zero extended.
* disp8s is sign-extended.
* disp12s is sign-extended.

Labels
* Labels are relative to the PC following the Delay Slot.
* label8s is sign-extended.
* label12s is sign-extended.
* label16s is sign-extended.

Immediates
* imm8, 8-bit immediate is zero-extended.
* imm8s, 8-bit immediate is sign-extended.


Memory Addressing Modes
* @Rm
** Access memory via address in Rm
* @Rm+
** Load from address in Rm, incrementing the address
* @-Rn
** Store to address given in Rn, first decrementing the address
* @(R0, Rm)
** Load or store to address given by R0+Rm
* @(PC, Rm)
** Load or store to address given by PC+Rm
** PC is typically the start address of the instruction +4.
** For 32-bit instructions, it is +6.
* @(GBR, disp)
** Memory access is GBR + a scaled displacement.
* @(Rm, disp)
** Address is Rm with a displacement scaled by the value size.
* @(Rm, Ro, disp)
** Address is given by Rm+(Ro+Disp)*Scale
** If Ro is R0, then Scale is 1 (Byte).
** If Ro is R15, then Ro is treated as if it held 0.
** Giving R0 for the Ro in a LEA is Undefined if not Byte.
** Giving R15 for the Ro in a LEA is Undefined.


8C3e forms:
* e=QNST
* Q selects between 32-bit and 64-bit forms.
** 0: 32-bit int or float.
** 1: 64-bit long or double.
* NST, encode an additional bit for each register.
** For integer operations, only valid when Q=0.
*** Selects the high part of R0..R15.
** May be used for alternate forms when Q=1.


=== ADD ===

All
* 3nmC  ADD Rm, Rn
* 7nii  ADD #imm8s, Rn

BJX1
* 8Eii-7nii  ADD #imm16, Rn

Add Rm or Imm8 to the value in Rn.


=== ADD (3R) ===

BJX1
* 8Eii-3nmC  ADD Rm, #imm8, Rn
* 8C3e-0nst  ADD Rs, Rt, Rn

Add Imm8 or Rt to Rm or Rs and store the value in Rn.


=== ADDC ===

* 3nmE  ADDC Rm, Rn

Add Rm to the value in Rn with Carry.
SR.T is Carry-in, and SR.T is updated to reflect new Carry-out value.


=== ADDV ===

* 3nmF  ADDV Rm, Rn

Add Rm to the value in Rn with Overflow.

SR.T is cleared if the value falls within the range of signed values, and is set if the value falls outside this range.


=== AND ===

All
* 2nm9  AND Rm, Rn
* C9ii  AND #imm8, Rn

BJX1
* 8Ejj-C9nj  AND #imm12, Rn

And Rm or Immediate with the value in Rn, storing result into Rn.


=== AND (3R) ===

BJX1
* 8Eii-2nm9  AND Rm, #imm8, Rn
* 8C3e-3nst  AND Rs, Rt, Rn

And Rt or Immediate with the value in Rs or Rm, storing result into Rn.


=== AND.B ===

All, BJX1 (JQ=0)
* CDii  AND #imm8, @(R0, GBR)		//32-bit only

And Imm8 with the byte found at this address.

This instruction form is invalid in BJX1-64.


=== BF ===

All
* 8Bdd       BF label8s

BJX1
* 8Edd-8Bdd  BF label16s

Branch if False.
Branches to the relative displacement if SR.T is Zero.


=== BF/S ===

All
* 8Fdd       BF/S label8s

BJX1
* 8Edd-8Fdd  BF/S label16s

Branch if False with Delay Slot.
Branches to the relative displacement if SR.T is Zero.


=== BRA ===

All
* Addd       BRA label12s

BJX1
* 8Edd-Addd  BRA label20s

Unconditional branch with Delay Slot.


=== BRAF ===

* 0n23  BRAF Rn

Relative computed branch with Delay Slot.


=== BRA/N ===

BJX1
* 8Edd-82dd  BRA/N label16s

Unconditional branch with No Delay Slot.


=== BRK ===

* 003B  BRK

Breakpoint.


=== BSR ===

All
* Bddd       BSR label12s

BJX1
* 8Edd-Bddd  BSR label20s

Branch to Subroutine with Delay Slot.
This copies the return PC address into the PR register, and branches to relative address given by the displacement.


=== BSRF ===

* 0n03  BSRF Rn

Relative computed branch to subroutine with Delay Slot.
This copies the return PC address into the PR register, and branches to relative address given by PC+4+Rn.


=== BSR/N ===

BJX1
* 8Edd-83dd  BSR/N label16s

Branch to Subroutine with No Delay Slot.
This copies the return PC address into the PR register, and branches to relative address given by the displacement.


=== BT ===

All
* 89dd       BT label8s

BJX1
* 8Edd-89dd  BT label16s

Branch if True.
Branches to the relative displacement if SR.T is Non-Zero.


=== BT/S ===

All
* 8Ddd       BT/S label8s

BJX1
* 8Edd-8Ddd  BT/S label16s

Branch if True with Delay Slot.
Branches to the relative displacement if SR.T is Non-Zero.


=== CAS.L ===

* 2nm3  CAS.L Rm, Rn, @R0

Compare and Swap.


=== CLRMAC ===

* 0028  CLRMAC

Clear MACL and MACH to Zero.


=== CLRS ===

* 0048  CLRS

Clear SR.S to Zero.


=== CLRT ===

* 0008  CLRT

Clear SR.T to Zero.


=== CMP/EQ ===

All
* 3nm0       CMP/EQ Rm, Rn
* 88ii       CMP/EQ #imm8s, R0

BJX1
* 8Eii-3ni0  CMPEQ #imm12s, Rn
* 8Eii-88ii  CMPEQ #imm16s, R0

Compare if Rm and Rn are Equal, setting SR.T if they are equal, and clearing SR.T otherwise.


=== CMP/GE ===

All
* 3nm3       CMP/GE Rm, Rn

BJX1
* 8Eii-3ni3  CMP/GE #imm12, Rn

Compare if Rn is greater than or equal to Rm, setting SR.T if true, and clearing SR.T otherwise.


=== CMP/GT ===

All
* 3nm7       CMP/GT Rm, Rn

BJX1
* 8Eii-3ni7  CMP/GT #imm12, Rn

Compare if Rn is greater than Rm, setting SR.T if true, and clearing SR.T otherwise.


=== CMP/HI ===

All
* 3nm6       CMP/HI Rm, Rn

BJX1
* 8Eii-3ni6  CMP/HI #imm12, Rn

Compare if Rn is greater than Rm, setting SR.T if true, and clearing SR.T otherwise. The comparison is done as unsigned.


=== CMP/HS ===

All
* 3nm2       CMP/HS Rm, Rn

BJX1
* 8Eii-3ni2  CMP/HS #imm12, Rn

Compare if Rn is greater than or equal to Rm, setting SR.T if true, and clearing SR.T otherwise. The comparison is done as unsigned.


=== CMP/PL ===

* 4n15  CMP/PL Rn

Compare Rn with Zero, setting SR.T if Rn is greater than Zero.


=== CMP/PZ ===

* 4n11  CMP/PZ Rn

Compare Rn with Zero, setting SR.T if Rn is greater than or equal to Zero.


=== CMP/STR ===

All, BJX1 (JQ=0)
* 2nmC  CMP/STR Rm, Rn

Set SR.T if any byte in Rm equals the corresponding byte in Rn.
This operation is invalid in BJX1-64.


=== DIV0S ===

* 2nm7  DIV0S Rm, Rn

Initializes state for signed division.

 q = SR.DQ ? DataRn[63] : DataRn[31];
 m = SR.DQ ? DataRm[63] : DataRm[31];
 SR.Q <= q;
 SR.M <= m;
 SR.T <= q xor m;


=== DIV0U ===

* 0019  DIV0U

Initializes state for unsigned division.

 SR.Q <= 0
 SR.M <= 0
 SR.T <= 0


=== DIV1 ===

* 3nm4  DIV1 Rm, Rn

Perform a division step, with SR.Q, SR.M, and SR.T holding internal state.

 q0 = SR.Q;
 m0 = SR.M;
 t0 = SR.T;
 q1 = SR.DQ ? DataRn[63] : DataRn[31];
 dn1 = (DataRn < < 1) | t0;
 if (q0 == m0)
   dn2 = dn1 - DataRm;
 else
   dn2 = dn1 + DataRm;
 c0 = SR.DQ ? dn2[64] : dn2[32];
 q2 = (q1 ^ m0) ^ c0;
 t2 = ! (q2 ^ m0);
 DataRn = dn2;
 SR.Q = q2;
 SR.T = t2;
 

=== DMULS.L ===

All
* 3nmD  DMULS.L Rm, Rn

Perform a signed multiply of Rn and Rm, storing the result in MACH:MACL.


=== DMULU.L ===

All
* 3nm5  DMULU.L Rm, Rn

Perform an unsigned multiply of Rn and Rm, storing the result in MACH:MACL.


=== DT ===

All
* 4n10  DT Rn

Decrements Rn, setting SR.T if the result is Zero, clearing SR.T otherwise.


=== EXTS.B ===

All
* 6nmE  EXTS.B Rm, Rn

Sign extend the Byte value in Rm and store the result in Rn.


=== EXTS.L ===

All
* 4n54  EXTS.L Rn

Sign extend the Byte value in Rm and store the result in Rn.


=== EXTS.W ===

All
* 6nmF  EXTS.W Rm, Rn

Sign extend the Word value in Rm and store the result in Rn.


=== EXTU.B ===

All
* 6nmC  EXTU.B Rm, Rn

Zero extend the Byte value in Rm and store the result in Rn.


=== EXTU.L ===

All
* 4n44  EXTU.L Rn

Zero extend the Byte value in Rm and store the result in Rn.


=== EXTU.W ===

All
* 6nmD  EXTU.W Rm, Rn

Zero extend the Word value in Rm and store the result in Rn.


=== JMP ===

All
* 4n2B  JMP Rn

Jump to the location given by the address in Rn.


=== JSR ===

All
* 4n0B  JSR Rn

Jump to the subroutine given by the address in Rn.


=== LDC ===

Varies
* 4m0E  LDC Rm, SR
* 4m1E  LDC Rm, GBR
* 4m2E  LDC Rm, VBR
* 4m3E  LDC Rm, SSR
* 4m4E  LDC Rm, SPC
* 4mNE  LDC Rm, RnB
* 4mFA  LDC Rm, DBR

Load Rm into the given Control Register.

SR is special in that it will mask off most of the bits.


=== LDC.L ===

Varies
* 4m07  LDC.L @Rm+, SR
* 4m17  LDC.L @Rm+, GBR
* 4m27  LDC.L @Rm+, VBR
* 4m37  LDC.L @Rm+, SSR
* 4m47  LDC.L @Rm+, SPC
* 4mN7  LDC.L @Rm+, RnB
* 4mF6  LDC.L @Rm+, DBR

Load Control register from Memory.


=== LDS ===

Varies
* 4m0A  LDS Rm, MACH
* 4m1A  LDS Rm, MACL
* 4m2A  LDS Rm, PR
* 4m5A  LDS Rm, FPUL
* 4m6A  LDS Rm, FPSCR

Load System register from GPR.


=== LDS.L ===

Varies
* 4m06  LDS.L @Rm+, MACH
* 4m16  LDS.L @Rm+, MACL
* 4m26  LDS.L @Rm+, PR
* 4m56  LDS.L @Rm+, FPUL
* 4m66  LDS.L @Rm+, FPSCR

Load System Register from Memory.


=== LEA.B ===

BJX1
* 8Eod-6nm4  LEA.B @(Rm, Ro, disp4), Rn
* 8Edd-6nm8  LEA.B @(Rm, disp8s), Rn

Calculate the effective-address of a Byte operation and store the result in Rn.
If Ro is R0 or R15, the results are undefined.


=== LEA.W ===

BJX1
* 8Eod-6nm5  LEA.W @(Rm, Ro, disp4), Rn
* 8Edd-6nm9  LEA.W @(Rm, disp8s), Rn

Calculate the effective-address of a Word operation and store the result in Rn.
If Ro is R0 or R15, the results are undefined.


=== LEA.L ===

BJX1
* 8Eod-6nm6  LEA.L @(Rm, Ro, disp4), Rn
* 8Edd-6nmA  LEA.L @(Rm, disp8s), Rn

Calculate the effective-address of a DWord operation and store the result in Rn.
If Ro is R0 or R15, the results are undefined.


=== LEA.Q ===

BJX1
* 8Eod-6nm7  LEA.Q @(Rm, Ro, disp4), Rn
* 8Edd-6nmB  LEA.Q @(Rm, disp8s), Rn

Calculate the effective-address of a QWord operation and store the result in Rn.
If Ro is R0 or R15, the results are undefined.


=== LDTLB ===

SH4, BJX1
* 0038  LDTLB

Load a TLB Entry into the TLB.
Specifics depend on the MMU in use.


=== MAC.L ===

* 0nmF  MAC.L @Rm+, @Rn+

Multiply DWord values from Rm and Rn, accumulating the result into MACH:MACL.

(BJX1-32 Deprecated; BJX1-64 Invalid)


=== MAC.Q ===

BJX1 (DQ=1)
* 4nmF  MAC.Q @Rm+, @Rn+

Multiply QWord values from Rm and Rn, accumulating the result into XMACH:MACH:XMACL:MACL.
The intermediate product is 128 bits, and XMACH:MACH:XMACL:MACL is interpreted as a 128-bit register.

(BJX1, Drop)


=== MAC.W ===

All, BJX1 (DQ=0)
* 4nmF  MAC.W @Rm+, @Rn+

Multiply Word values from Rm and Rn, accumulating the result into MACH:MACL.

(BJX1-32 Deprecated; BJX1-64 Invalid)


=== MOV ===

All
* 6nm3       MOV Rm, Rn
* Enii       MOV #imm8s, Rn

BJX1
* 8Eii-Enii  MOV #imm16, Rn


=== MOV.B ===

All
* 0nm4  MOV.B Rm, @(R0, Rn)
* 2nm0  MOV.B Rm, @Rn
* 2nm4  MOV.B Rm, @-Rn
* 80ni  MOV.B R0, @(Rn, disp4)
* 0nmC  MOV.B @(R0, Rm), Rn
* 6nm0  MOV.B @Rm, Rn
* 6nm4  MOV.B @Rm+, Rn
* 84mi  MOV.B @(Rm, disp8), R0

Deprecated in BJX1
* C0ii  MOV.B R0, @(GBR, disp8)
* C4ii  MOV.B @(GBR, disp8), R0

SH2A
* 4m8B       MOV.B Rm, @Rm+
* 4mCB       MOV.B @-Rm, R0
* 3nm1-0ddd  MOV.B Rm, @(Rn, disp12)
* 3nm1-4ddd  MOV.B @(Rm, disp12), Rn

BJX1
* 8Eod-0nm4  MOV.B Rm, @(Rn, Ro, disp4)
* 8Edd-2nm0  MOV.B Rm, @(Rn, disp8s)
* 8Eod-0nmC  MOV.B @(Rm, Ro, disp4), Rn
* 8Edd-6nm0  MOV.B @(Rm, disp8s), Rn
* 8Eii-4n84  MOV.B #imm, @Rn
* 8Eii-4nC4  MOV.B #imm, @-Rn


Load or store a Byte.


=== MOV.L ===

All
* 0nm6  MOV.L Rm, @(R0, Rn)
* 1nmi  MOV.L Rm, @(Rn, disp4)
* 2nm2  MOV.L Rm, @Rn
* 2nm6  MOV.L Rm, @-Rn
* 0nmE  MOV.L @(R0, Rm), Rn
* 5nmi  MOV.L @(Rm, disp4), Rn
* 6nm2  MOV.L @Rm, Rn
* 6nm6  MOV.L @Rm+, Rn
* Dndd  MOV.L @(PC, disp8), Rn

Deprecated in BJX1
* C2ii  MOV.L R0, @(GBR, disp8)
* C6ii  MOV.L @(GBR, disp8), R0

SH2A
* 4mAB       MOV.L R0, @Rn+
* 4mEB       MOV.L @-Rm, R0
* 3nm1-2ddd  MOV.L Rm, @(Rn, disp12)
* 3nm1-6ddd  MOV.L @(Rm, disp12), Rn

BJX1
* 8Eod-0nm6  MOV.L Rm, @(Rn, Ro, disp4)
* 8Edd-1nmo  MOV.L Rm, @(Rn, Ro, disp8s)
* 8Edd-2nm2  MOV.L Rm, @(Rn, disp8s)
* 8Eod-0nmE  MOV.L @(Rm, Ro, disp4), Rn
* 8Edd-5nmo  MOV.L @(Rm, Ro, disp8s), Rn
* 8Edd-6nm2  MOV.L @(Rm, disp8s), Rn
* 8E0d-Dndd  MOV.L @(PC, disp13), Rn
* 8Eii-4nA4  MOV.L #imm, @Rn
* 8Eii-4nE4  MOV.L #imm, @-Rn


Load or Store a DWord.


=== MOV.Q ===

BJX1 (DQ=1)
* 0nm5  MOV.Q Rm, @(R0, Rn)
* 0nmD  MOV.Q @(R0, Rm), Rn
* 2nm1  MOV.Q Rm, @Rn
* 2nm5  MOV.Q Rm, @-Rn
* 4m9B  MOV.Q R0, @Rn+
* 4mDB  MOV.Q @-Rm, R0
* 6nm1  MOV.Q @Rm, Rn
* 6nm5  MOV.Q @Rm+, Rn
* 81nd  MOV.Q R0, @(Rn, disp4)
* 85md  MOV.Q @(Rm, disp4), R0
* 9ndd  MOV.Q @(PC, disp8), Rn

Deprecated in BJX1
* C1dd  / MOV.Q R0, @(GBR, disp8)
* C5dd  / MOV.Q @(GBR, disp8), R0

BJX1 (DQ=0)
* 4n64  MOV.Q @R0, Rn
* 4m74  MOV.Q Rm, @R0

BJX1
* 8Eod-0nm7  MOV.Q Rm, @(Rn, Ro, disp4)
* 8Eod-0nmF  MOV.Q @(Rm, Ro, disp4), Rn
* 8Edd-2nm3  MOV.Q Rm, @(Rn, disp8s)
* 8Eii-4nB4  MOV.Q #imm, @Rn
* 8Eii-4nF4  MOV.Q #imm, @-Rn
* 8Edd-6nm3  MOV.Q @(Rm, disp8s), Rn
* 8EEd-Dndd  MOV.Q @(PC, disp13), RQn

Load or store a WORD.


=== MOV.W ===

All, BJX1 (DQ=0)
* 0nm5  MOV.W Rm, @(R0, Rn)
* 2nm1  MOV.W Rm, @Rn
* 2nm5  MOV.W Rm, @-Rn
* 81nd  MOV.W R0, @(Rn, disp4)
* 0nmD  MOV.W @(R0, Rm), Rn
* 6nm1  MOV.W @Rm, Rn
* 6nm5  MOV.W @Rm+, Rn
* 85md  MOV.W @(Rm, disp4), R0
* 9ndd  MOV.W @(PC, disp8), Rn

Deprecated in BJX1
* C1dd  MOV.W R0, @(GBR, disp8)
* C5ii  MOV.W @(GBR, disp8), R0

SH2A
* 4m9B       MOV.W R0, @Rn+
* 4mDB       MOV.W @-Rm, R0
* 3nm1-1ddd  MOV.W Rm, @(Rn, disp12)
* 3nm1-5ddd  MOV.W @(Rm, disp12), Rn

BJX1 (DQ=1)
* 4n64  MOV.W @R0, Rn
* 4m74  MOV.W Rm, @R0

BJX1
* 8Eod-0nm5  MOV.W Rm, @(Rn, Ro, disp4)
* 8Edd-2nm1  MOV.W Rm, @(Rn, disp8s)
* 8Eod-0nmD  MOV.W @(Rm, Ro, disp4), Rn
* 8Edd-6nm1  MOV.W @(Rm, disp8s), Rn
* 8E2d-Dndd  MOV.W @(PC, disp13), Rn
* 8E6d-Dndd  MOV.W @(PC, disp13), RHn
* 8Eii-4n94  MOV.W #imm, @Rn
* 8Eii-4nD4  MOV.W #imm, @-Rn

Load or store a WORD.


=== MOVA ===

All
* C7dd  MOVA @(PC, disp8), R0

BJX1
* 8E0d-9ndd MOVA @(PC, disp13), Rn

Load PC-Relative Address.
Address is calculated as ((PC+4)^(~3)).


=== MOVCA.L ===

* 0nC3  MOVCA.L R0, @Rn

Store value to memory without reading memory into cache.


=== MOVT ===

* 0n29  MOVT Rn

Copy SR.T to Rn.


=== MOVU.B ===

* 3nm1-8ddd  MOVU.B @(Rm, disp12), Rn
* 8Edd-6nmC  MOVU.B @(Rm, disp8s), Rn

Load Unsigned Byte.

=== MOVU.W ===

SH2A
* 3nm1-9ddd  MOVU.W @(Rm, disp12), Rn

BJX1
* 8Edd-6nmD  MOVU.W @(Rm, disp8s), Rn
* 8E2d-9ndd  MOVU.W @(PC, disp13), Rn
* 8E6d-9ndd  MOVU.W @(PC, disp13), RHn
* 8EAd-9ndd  MOVU.W @(PC, disp13), RQn

Load Unsigned Word.


=== MOVU.L ===

* 8Edd-6nmE  MOVU.L @(Rm, disp8s), Rn
* 8ECd-Dndd  MOVU.L @(PC, disp13), RQn

Load Unsigned DWord.


=== MOVUA.L ===

* 0mA9  MOVUA.L R0, @Rm
* 0mE9  MOVUA.L R0, @-Rm
* 4mA9  MOVUA.L @Rm, R0
* 4mE9  MOVUA.L @Rm+, R0

Load/Store Unaligned DWord.


=== MUL (3R) ===

BJX1
* 8Eii-2nmE  MUL Rm, #imm8, Rn
* 8C3e-2nst  MUL Rs, Rt, Rn

Multiply values, storing result in Rn.


=== MUL.L ===

* 0nm7       MUL.L Rm, Rn

Multiply Rm and Rn, storing low bits of result in MACL.


=== MULS.Q ===

All, BJX1 (DQ=1)
* 2nmF  MULS.Q Rm, Rn

Signed multiply of the QWord values in Rm and Rn, storing the 128-bit result into XMACH:MACH:XMACL:MACL.


=== MULU.Q ===

All, BJX1 (DQ=1)
* 2nmE  MULU.Q Rm, Rn

Unsigned multiply of the QWord values in Rm and Rn, storing the result into XMACH:MACH:XMACL:MACL.


=== MULS.W ===

All, BJX1 (DQ=0)
* 2nmF  MULS.W Rm, Rn

Signed multiply of the Word values in Rm and Rn, storing the result into MACL.


=== MULU.W ===

All, BJX1 (DQ=0)
* 2nmE  MULU.W Rm, Rn

Unsigned multiply of the Word values in Rm and Rn, storing the result into MACL.


=== NEG ===

All
* 6nmB  NEG Rm, Rn

Negate value in Rm and store in Rn.


=== NEGC ===

All
* 6nmA  NEGC Rm, Rn

Negate with carry value from Rm, storing result in Rn.


=== NOP ===

All
* 0009  NOP
* 0i09  NOP #imm

Does nothing.

A 4 bit immediate may be supplied to a NOP (with a value between 1 and 14), but it will be ignored. This value is mostly intended for debugging purposes.


=== NOT ===

All
* 6nm7  NOT Rm, Rn

Invert bits in Rm and store result in Rn.


=== OR ===

All
* 2nmB       OR Rm, Rn
* CBii       OR #imm8, R0

BJX1
* 8Ejj-CBnj  OR #imm12, Rn

Bitwise Or Rm with Rn.


=== OR (3R) ===

BJX1
* 8Eii-2nmB  OR Rm, #imm8, Rn
* 8C3e-4nst  OR Rs, Rt, Rn

Or Imm or Rt with Rs Rm or Rs, storing result in Rn.


=== OR.B ===

All, BJX1 (JQ=0)
* CFii       OR.B #imm8, @(GBR, R0)

Or immediate against a byte in memory.

This instruction form is invalid in BJX1-64.


=== PREF ===

* 0n83  PREF @Rn

Prefetch address.
This may fault if the address is not valid.


=== ROT32 ===

BJX1 (JQ=1)
* 4n14  ROT32 Rn

Rotate a QWord value by 32 bits.


=== ROTCL ===

All
* 4n24  ROTCL Rn

Rotate a value 1 bit left, with the incomming bit comming from SR.T, and SR.T being updated according to the shifted-out bit.


=== ROTCR ===

All
* 4n25  ROTCR Rn

Rotate a value 1 bit right, with the incomming bit comming from SR.T, and SR.T being updated according to the shifted-out bit.


=== ROTL ===

All
* 4n04  ROTL Rn

Rotate value left by 1 bit, updating SR.T according to the shifted bit.


=== ROTR ===

* 4n05  ROTR Rn

Rotate value right by 1 bit, updating SR.T according to the shifted bit.


=== RTE ===

* 002B  RTE

Return From Exception.
Has a Delay Slot.
Copies SPC to PC, SGR to R15, and SSR to SR.


=== RTS ===

* 000B  RTS

Return From Subroutine.
Has a Delay Slot.
Copies PR to PC.


=== SETS ===

* 0058  SETS

Set SR.S to One.


=== SETT ===

* 0018  SETT

Set SR.T to One.


=== SHAD ===

SH3+
* 4nmC       SHAD Rm, Rn

BJX1
* 8Eii-4nmC  SHAD Rm, #imm, Rn

Arithmetic Barrel Shift.

SHAD Rm, Rn
* Shifts Rn by the amount given in Rm and stores the result in Rn.

SHAD Rm, imm, Rn
* Shifts Rm by the amount given in #imm and stores the result in Rn.

Shift:
* if(shift>=0) out = in << (shift mod width);
* if((shift<0) && (shift mod width)) out = in >> (width-(shift mod width));
* else out = (in>=0)?0:(-1);


=== SHAL ===

* 4n20  SHAL Rn

Arithmetic Shift Left.
Shifts value right by 1 bit, setting SR.T according to the shifted-out bit.


=== SHAR ===

All
* 4n21  SHAR Rn

Arithmetic Shift Right.
Shifts value right by 1 bit, setting SR.T according to the shifted-out bit.


=== SHAR (3R) ===

BJX1
* 8C3e-8nst  SHAR Rs, Rt, Rn		// (Q=0|e=8) Rn=Rs>>Rt (Signed)
* 8C3e-8nsi  SHAR.L Rs, imm5, Rn	// (Q=1&S=1) Rn=Rs>>imm5 (Signed)
* 8C3e-8nsi  SHAR.Q Rs, imm6, Rn	// (Q=1&N=1) Rn=Rs>>imm6 (Signed)

Arithmetic Shift Right.


=== SHLD ===

SH3+
* 4nmD       SHLD Rm, Rn

BJX1
* 8Eii-4nmD  SHLD Rm, #imm, Rn

Logical Barrel Shift.

SHLD Rm, Rn
* Shifts Rn by the amount given in Rm and stores the result in Rn.

SHLD Rm, imm, Rn
* Shifts Rm by the amount given in #imm and stores the result in Rn.

Shift:
* if(shift>=0) out = in << (shift mod width);
* if((shift<0) && (shift mod width)) out = in >> (width-(shift mod width));
* else out = 0;


=== SHLL ===

All
* 4n00  SHLL Rn

Logical Shift Left.
Shifts value right by 1 bit, setting SR.T according to the shifted-out bit.


=== SHLL (3R) ===

BJX1
* 8C3e-6nst  SHLL Rs, Rt, Rn
* 8C3e-6nsi  SHLL.L Rs, imm5, Rn	// (Q=1&S=1) Rn=Rs<<imm5
* 8C3e-6nsi  SHLL.Q Rs, imm6, Rn	// (Q=1&N=1) Rn=Rs<<imm6

Logical Shift Left.


=== SHLL1 (Pseudo) ===

* 3nnC  SHLL1 Rn	(ADD Rn, Rn)

Shift value left by 1 bits.
This form is a pseudo-operation implemented by adding a value to itself.
It is defined mostly as a special case which does not effect SR.T.


=== SHLL2 ===

* 4n08  SHLL2 Rn

Shift value left by 2 bits.


=== SHLL4 ===

BJX1
* 4n34  SHLL4 Rn

Shift value left by 4 bits.


=== SHLL8 ===

* 4n18  SHLL8 Rn

Shift value left by 8 bits.


=== SHLL16 ===

* 4n28  SHLL16 Rn

Shift value left by 16 bits.


=== SHLR ===

All
* 4n01  SHLR Rn

Logical Shift Right.
Shifts value right by 1 bit, setting SR.T according to the shifted-out bit.


=== SHLR (3R) ===

BJX1
* 8C3e-7nst  SHLR Rs, Rt, Rn
* 8C3e-7nsi  SHLR.L Rs, imm5, Rn	// (Q=1&S=1) Rn=Rs>>imm5 (Unsigned)
* 8C3e-7nsi  SHLR.Q Rs, imm6, Rn	// (Q=1&N=1) Rn=Rs>>imm6 (Unsigned)

Logical Shift Right.


=== SHLR2 ===

All
* 4n09  SHLR2 Rn

Shift value right by 2 bits.


=== SHLR4 ===

BJX1
* 4n35  SHLR4 Rn

Shift value right by 4 bits.


=== SHLR8 ===

All
* 4n19  SHLR8 Rn

Shift value right by 8 bits.


=== SHLR16 ===

All
* 4n29  SHLR16 Rn

Shift value right by 16 bits.


=== SLEEP ===

* 001B  SLEEP


=== STC ===

* 0n0E  STC SR, Rn
* 0n1E  STC GBR, Rn
* 0n2E  STC VBR, Rn
* 0n3E  STC SSR, Rn
* 0n4E  STC SPC, Rn
* 0nFA  STC DBR, Rn

* 0nME  STC RmB, Rn

Copy Control Register to GPR.
SR is special in that only certain bits are copied.


=== STC.L ===

* 0n07  STC.L SR, @-Rn
* 0n17  STC.L GBR, @-Rn
* 0n27  STC.L VBR, @-Rn
* 0n37  STC.L SSR, @-Rn
* 0n47  STC.L SPC, @-Rn
* 0nF6  STC.L DBR, @-Rn

* 0nM7  STC.L RmB, @-Rn

Store Control Register to Memory.


=== STS ===

* 0m0A  STS MACH, Rn
* 0m1A  STS MACL, Rn
* 0m2A  STS PR, Rn
* 0m5A  STS FPUL, Rn
* 0m6A  STS FPSCR, Rn

Copy system register to GPR.


=== STS.L ===

* 0m06  STS.L MACH, @-Rn
* 0m16  STS.L MACL, @-Rn
* 0m26  STS.L PR, @-Rn
* 0m56  STS.L FPUL, @-Rn
* 0m66  STS.L FPSCR, @-Rn

Store System Register to Memory.


=== SUB ===

All
* 3nm8       SUB Rm, Rn

Subtract Rm from Rn.


=== SUB (3R) ===

BJX1
* 8Eii-3nm8  SUB Rm, #imm8, Rn
* 8C3e-1nst  SUB Rs, Rt, Rn

Subtract Imm or Rt from Rm or Rs, storing the result in Rn.


=== SUBC ===

* 3nmA  SUBC Rm, Rn

Subtract with Carry.


=== SUBV ===

* 3nmB  SUBV Rm, Rn

Subtract with Overflow.


=== SWAP.B ===

* 6nm8  SWAP.B Rm, Rn

Swap Bytes within value.


=== SWAP.W ===

* 6nm9  SWAP.W Rm, Rn

Swap Words within value.


=== TAS.B ===

All, BJX1 (JQ=0)
* 4n1B  TAS.B @Rn

Test and Set Byte.


=== TRAPA ===

* C3ii  TRAPA #imm8

Generate an interrupt.


=== TST ===

All
* 2nm8       TST Rm, Rn
* C8ii       TST #imm8, R0

BJX1
* 8Ejj-C8nj  TST #imm12, Rn


=== TST.B ===

All, BJX1 (JQ=0)
* CCii  TST.B #imm8, @(GBR, R0)

This instruction form is invalid in BJX1-64.


=== XOR ===

All
* 2nmA       XOR Rm, Rn
* CAii       XOR #imm8, R0

BJX1
* 8Ejj-CAnj  XOR #imm12, Rn

Xor Rm or Imm with Rn or R0.


=== XOR (3R) ===

BJX1
* 8Eii-2nmA  XOR Rm, #imm8, Rn
* 8C3e-5nst  XOR Rs, Rt, Rn

Subtract Imm or Rt from Rm or Rs, storing the result in Rn.


=== XOR.B ===

All, BJX1 (JQ=0)
* CEii  XOR.B #imm8, @(GBR, R0)

This instruction form is invalid in BJX1-64.


=== XTRCT ===

All
* 2nmD  XTRCT Rm, Rn

I am honestly not sure what this instruction is used for.


 OutRn[31:16]=DataRm[15: 0]
 OutRn[15: 0]=DataRn[31:16]

