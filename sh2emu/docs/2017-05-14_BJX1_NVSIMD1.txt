Redesign of the WVSIMD and NVSIMD Ideas.
* Optional Extension of the BJX1 ISA [[SH-BJX1-ISA]]
* Packed Byte, Word, Long, Float, Double
* FPUL register may be extended to 64-bits as-needed.
* SIMD Operations will optionally replace the FPU instructions.
** The use of SIMD will be set via a VE bit in FPSCR.
** If VE is clear, then FPU instructions are used.
** Rounding mode may select between variants of operations in SIMD mode.


=== Registers ===

Registers (VE=0):
* FR0..FR15: Float Registers (Bank A)
** DR0/2/4/6/8/10/12/14: Double Registers (Bank A)
* XF0..XF15: Float Registers
** XD0/2/4/6/8/10/12/14: Double Registers
* DRn operations will be able to access the XDn registers by setting the LSB of the register to 1.

Registers (VE=1):
* FR0..FR15: Float Registers (Bank A)
* XF0..XF15: Float Registers (Bank B)
** Will be also be addressable as FR16..FR31
* YF0..YF15: Float Registers (Bank C)
** Will be also be addressable as FR32..FR47
* ZF0..ZF15: Float Registers (Bank D)
** Will be also be addressable as FR48..FR63
* DRn: Will consist of the pairs (FRn,FRn+1).
** DR0=FR0,FR1
** DR1=XF0,XF1 (Alias to XD0)
** DR2=FR2,FR3
** DR3=XF2,XF3 (Alias to XD2)
* DX0..DX15: Will consist of the pairs (FRn,XFn).
** FR will only effect 32-bit float operations.
* XR0..XR15: Paired registers will be 128 bit (FR0,FR1,XF0,XF1)
** XR0=FR0,FR1,XF0,XF1
** XR1=YF0,YF1,ZF0,ZF1
** XR2=FR2,FR3,XF2,XF3
** XR3=YF2,YF3,ZF2,ZF3
** XR4=FR4,FR5,XF4,XF5
** ...

Vector Layouts:
* Logically MSB precedes LSB in the register ordering.
* For a 4 elem vector, X is towards the MSB, and W is towards the LSB.

FPSCR bits:
* 0000_0003: RM		//Rounding Mode (or Vector Mode)
* 0004_0000: DN		//Denormalization Mode
* 0008_0000: PR		//Precision
* 0010_0000: SZ		//Load/Store Size
* 0020_0000: FR		//Swap Float Register Banks A and B
* 0040_0000: SW0	//Swap 0 (Swap Low/High DWords of DRn)
* 0080_0000: SW1	//Swap 1 (Swap Low/High YRn halves)
* 0100_0000: VE		//Vector Enable

Flags (VE=0)
* FPSCR.SZ: Selects 32 or 64-bit memory loads/stores.
** 0=32 bit
** 1=64 bit
* FPSCR.PR: Selects between Float and Double operations.
** 0: Float (FRn)
** 1: Double (DRn)
* FPSCR.SW0
** Swap Low/High DWords on 64-bit load/store.
** 0: Loads DWORDs as (High,Low)
** 1: Loads DWORDs as (Low,High)

Flags (VE=1)
* FPSCR.SZ: Selects 32 or 64-bit vector.
** 0=32 bit / 64-bit
** 1=64 bit / 128-bit
* FPSCR.PR: Selects packed Byte or packed Word.
** 0: 4x Packed Bytes (FRn)
** 1: 4x Packed Word (DRn)
* FPSCR.RM:
** 00: Packed Byte or Word (FRn/DRn)
** 01: Packed Half or Float (FRn/DRn)
*** Packed half-float mode: 4x half-float in 64 bits.
*** In packed float mode, operations would apply to a pair of floats.
** 10: Packed Long/Resv (DXn/XRn)
** 11: Packed Float/Double (DRn/XRn)
* FPSCR.SW0
** Swap Low/High DWords on 64-bit load/store.
** Swap DWord pairs for 128 bit load/store.
** May be implemented as an XOR against address bit 2.
* FPSCR.SW1
** Swap Low/High Halves on 128-bit load/store.
** 0: FR0,FR1,XF0,XF1
** 1: XF0,XF1,FR0,FR1
** May be implemented as an XOR against address bit 3.

Non-extended Instructions
* Will function as in Mini-SIMD or FPU


=== Mode and Operation Bits ===

FPSCR SIMD Modes (SZ,PR,RM):
* 0,0,00: 4x Packed Byte (FRn)
* 0,0,01: 2x Packed Half (FRn)
* 0,0,10: 2x Packed Long (DXn)
* 0,0,11: 2x Packed Float (DRn)
* 0,1,00: 2x Packed Word (FRn)
* 0,1,01: Float (FRn, Scalar)
* 0,1,10: Double (DXn, Scalar)
* 0,1,11: Double (DRn, Scalar)
* 1,0,00: 8x Packed Byte (DRn)
* 1,0,01: 4x Packed Half (DRn)
* 1,0,10: 4x Packed Long (XRn)
* 1,0,11: 4x Packed Float (XRn)
* 1,1,00: 4x Packed Word (DRn)
* 1,1,01: 2x Float (DRn)
* 1,1,10: Resv
* 1,1,11: 2x Double (XRn)


V/VV (Arith):
* 4 bit: zpmm
* 8 bit: zpmm-xyzu
* z: SZ
* p: PR
* mm: RM
* x: Bit4 of FRn (Reserved for 64/128 bit ops)
* y: Bit4 of FRm (Reserved for 64/128 bit ops)
* z: Bit5 of FRn (Selects Banks C/D)
* u: Bit5 of FRm (Selects Banks C/D)


VV (FMOV/PMOV):
* wwww-xxyy
* wwww:
** 0000: FRm, FRn	//Copy FRn
** 0001:
** 0010: / XFm, FRn	//Copy XFm to FRn
** 0011:  Rm, FRn	//Copy GPR to FRn (FMOV.IS)
** 0100:
** 0101: DRm, DRn	//Copy DRn
** 0110: ? Rm, DXn	//Copy GPR to DXn
** 0111: Rm, DRn	//Copy GPR to DRn
** 1000: Rm, Rn		//Copy GPR (MOV.L)
** 1001: ? DXm,  Rn	//Copy DXm to GPR (Rn, RHn)
** 1010: Rm, Rn		//Copy GPR (MOV.Q)
** 1011: ? DRm, DXn	//Copy DRm to DXn (FR0,XF0)->(FR0,FR1)
** 1100: FRm,  Rn	//Copy FRm to GPR (FMOV.SI)
** 1101: DRm,  Rn	//Copy DRm to GPR (Rn, RHn)
** 1110: ? DXm, DRn	//Copy DXm to DRn (FR0,FR1)->(FR0,XF0)
** 1111: XRm, XRn	//Copy XRn (FR0,XF0,FR1,XF1)
* xx: Bit4/5 of Rn
* yy: Bit4/5 of Rm


VV (PMOV.S):
* wwxy
* ww=00: FRn
* ww=01: DRn
** Loads (FRn+0,FRn+1)
** Order depends on SW0
** SW1 must be 0
* ww=10: DXn
** Loads (FRn,XFn)
** Order depends on SW0
** SW1 must be 0
* ww=11: XRn
** Order depends on SW0 and SW1
* x: Bit4 of Rn (FRn) / Bit5 of DRn/XRn
* y: Bit4 of Rm (FRn) / Bit5 of DRm/XRn

PSHUF VV 8-bit:
* wwttmmmm
** tt=00: Byte
** tt=01: Word/Half
** tt=10: Long/Float
** tt=11: Double
* mmmm=Shuffle Register (GPR)
** 2-elem: 2x 1b
** 4-elem: 4x 2b (8-bit)
** 8-elem: 8x 3b (24-bit)
**
* wwtt:
** 0000: 4x Byte (Reg 4x2b)
** 0001: 2x Word (Imm, Shuf2)
** 0010: 4x Byte (Imm, Shuf4)
** 0011: Reserved
** 0100: 8x Byte (Reg 8x3b)
** 0101: 4x Word (Reg, 4x2b)
** 0110: 2x DWord (Imm, Shuf2)
** 0111: 4x Word (Imm, Shuf4)
** 1000: 4x DWord (Imm, Shuf4)
** 1001: 8x Word (Reg, 8x3b)
** 1010: 4x DWord (Reg, 4x2b)
** 1011: 2x QWord (Imm, Shuf2)
** 1100: Reserved
** 1101: Reserved
** 1110: Reserved
** 1111: Reserved

PSHUF (Shuf4: 4-bit, 4-elem)
* 0: XYWZ
* 1: XZYW
* 2: YXZW
* 3: YZXW
* 4: ZXYW
* 5: ZYXW
* 6: XXXX
* 7: YYYY
* 8: WXYZ
* 9: WXZY
* 10: WYXZ
* 11: WYZX
* 12: WZXY
* 13: WZYX
* 14: ZZZZ
* 15: WWWW

PSHUF (Shuf2: 4-bit, 2-elem)
* 0: XX
* 1: YX
* 2: XY
* 3: YY

PSETMD 4-bit
* imm4=zpmm
** z: FPSCR.SZ
** p: FPSCR.PR
** mm: Rounding Mode
* Other bits for FPSCR are left as-is.

PSETMD 12-bit
* imm12=000v-wwfz-pdmm
* v: VE
* ww: Swap Mode
* f: FR
* z: SZ
* p: PR
* d: DN
* mm: Rounding Mode
* Other bits for FPSCR are cleared to 0.


Notes:
* Packed integer arithmetic will be modular.
* Packed byte to packed word conversion will load the byte into the high bits of the word.
* Packed word to byte conversion will preserve the high bits.

Notation:
* S: Operation in Scalar Mode (VE=0)
* V: Operation in Vector Mode (VE=1)
* IV: Operation specific to integer vectors
* FV: Operation specific to floating point vectors


=== Instructions (16-bit I-Forms) ===

Instructions
* F---
**	Fnm0
***		Fnm0 FADD FRm, FRn		//S: Float Add
***		Fnm0 PADD FRm, FRn		//V: Packed Add (Modular)
**	Fnm1
***		Fnm1 FSUB FRm, FRn		//S: Float Sub
***		Fnm1 PSUB FRm, FRn		//V: Packed Sub (Modular)
**	Fnm2
***		Fnm2 FMUL FRm, FRn		//S: Float Mul
***		Fnm2 PMULL FRm, FRn		//IV: Packed Mul (Low Bits, Byte/Word)
***		Fnm2 PFMUL FRm, FRn		//FV: Packed Mul (Half/Float)
**	Fnm3
***		Fnm3 FDIV FRm, FRn		//S: Float Divide
***		Fnm3 PMULH FRm, FRn		//IV: Packed Mul (High Bits, Byte/Word)
***		Fnm3 PFDIV FRm, FRn		//FV: Packed Div (Half/Float)
**	Fnm4
***		Fnm4 FCMPEQ FRm, FRn	//S: Compare
***		Fnm4 PADDS FRm, FRn		//IV: Packed Add (Signed Saturate, Byte/Word)
**	Fnm5
***		Fnm5 FCMPGT FRm, FRn	//S: Compare
***		Fnm5 PADDU FRm, FRn		//IV: Packed Add (Unsigned Saturate, Byte/Word)

**	Fnm6 FMOV.S @(R0,Rm), FRn
**	Fnm7 FMOV.S FRm, @(R0,Rn)
**	Fnm8 FMOV.S @Rm, FRn
**	Fnm9 FMOV.S @Rm+, FRn
**	FnmA FMOV.S FRm, @Rn
**	FnmB FMOV.S FRm, @-Rn
**	FnmC
***		FnmC FMOV FRm, FRn	//S: Float Move
***		FnmC PMOV FRm, FRn	//V: Packed Move
**	F--D
***		Fn0D FSTS FPUL, FRn	//Move FPUL to FRn
***		Fm1D FLDS FRm, FPUL	//Move FRm to FPUL
***		Fn2D
****			Fn2D FLOAT FPUL, FRn	//S: Int to Float
****			Fn2D PFLOAT FPUL, FRn	//V: Packed Word to Half
***		Fn3D
****			Fm3D FTRC FRm, FPUL	//S: Float to Int
****			Fm3D PFTRC FRm, FPUL	//V: Packed Half to Word
***		Fn4D
****			Fn4D FNEG FRn		//S: Negate Float/Double
****			Fn4D PNEG FRn		//V: Negate packed values
***		Fn5D
****			Fn5D FABS FRn		//S: Absolute of Float/Double
****			Fn5D PABS FRn		//V: Absolute of packed values
***		Fn6D
****			Fn6D FSQRT FRn		//S: Square Root
****			Fn6D ? FRn		//V: Reserved
***		Fn7D
****			Fn7D FSRRA
****			Fn7D PSHUF R0, FRn	//V: Shuffle (R0=Mask)
***		Fn8D
****			Fn8D FLDI0		//S: Load 0
****			Fn8D PCNVBH FPUL, FRn	//V: convert 4x packed bytes to 4x packed half (32->64) 
***		Fn9D
****			Fn9D FLDI1		//S: Load 1
****			Fn9D PCNVHB FRm, FPUL	//V: convert 4x packed half to 4x packed bytes (64->32)
***		FnAD 
****			FnAD FCNVSD FPUL, FRn	//S: Convert Float to Double
****			FnAD PCNVBW FPUL, FRn	//IV: convert 4x packed bytes to 4x packed words (32->64)
****			FnAD PCNVHF FPUL, FRn	//FV: Convert 2x Half to 2x Float
***		FnBD 
****			FnBD FCNVDS FRm, FPUL	//S: Convert Double to Float
****			FnBD PCNVWB FRm, FPUL	//IV: convert 4x packed words to 4x packed bytes (64->32)
****			FnBD PCNVFH FRm, FPUL	//FV: Convert 2x Float to 2x Half
***		FiCD PSHUF			//V: Shuffle Imm4
***		FiDD PSETMD			//V: Packed Set Mode (Update FPSCR)
***		FnED
****			FnED FIPR		//S: Dot Product
****			FnED PDDPR		//V: Packed Dot Product
***		F-FD
****			F0FD / FSCA			//Sin/Cos
****			F1FD / FTRV2
****			F2FD / FSCA			//
****			F3FD FSCHG			//Flips FPSCR.SZ
****			F4FD / FSCA			//
****			F5FD / FTRV2
****			F6FD / FSCA			//
****			F7FD / FPCHG		//Flips FPSCR.PR
****			F8FD / FSCA			//
****			F9FD / FTRV2
****			FAFD / FSCA			//
****			FBFD / FRCHG		//Flips FPSCR.FR
****			FCFD / FSCA			//
****			FDFD / FTRV2
****			FEFD / FSCA			//
**	FnmE ? (Reserved Ops)
**	FooF ? (Escape 32 for FPU/SIMD Ops)


=== Instructions (32-bit I-Forms) ===

Instructions (Extended)
* F---
** 8Evv-Fnm0
***		8Evv-Fnm0 FADD FRm, FRn		//S: Float Add
***		8Evv-Fnm0 PADD FRm, FRn		//V: Packed Add (I=Modular)
** 8Evv-Fnm1
***		8Evv-Fnm1 FSUB FRm, FRn		//S: Float Sub
***		8Evv-Fnm1 PSUB FRm, FRn		//V: Packed Sub (I=Modular)
** 8Evv-Fnm2
***		8Evv-Fnm2 FMUL FRm, FRn		//FS: Float Mul
***		8Evv-Fnm2 PMULL FRm, FRn	//IV: Packed Mul (Keep Low Bits)
***		8Evv-Fnm2 PFMUL FRm, FRn	//FV: Packed Float Mul
** 8Evv-Fnm3
***		8Evv-Fnm3 FDIV FRm, FRn		//FS: Packed Mul (Keep High Bits)
***		8Evv-Fnm3 PMULH FRm, FRn	//IV: Packed Mul (Keep High Bits)
***		8Evv-Fnm3 PFDIV FRm, FRn	//FV: Packed Float Div
** 8Evv-Fnm4
***		8Evv-Fnm4 FCMPEQ FRm, FRn	//FS: Compare Equal
***		8Evv-Fnm4 PADDS FRm, FRn	//IV: Packed Add (Signed Saturate)
***		8Evv-Fnm4 Reserved			//FV: Reserved

** 8Evv-Fnm5
***		8Evv-Fnm5 FCMPGT FRm, FRn	//FS: Compare Greater
***		8Evv-Fnm5 PADDU FRm, FRn	//IV: Packed Add (Unsigned Saturate)
***		8Evv-Fnm5 Reserved			//FV: Reserved

**	8Evo-Fnm6 PMOV.S @(Rm,Ro), FRn
**	8Evo-Fnm7 PMOV.S FRm, @(Rn,Ro)
**	8Evd-Fnm8 PMOV.S @(Rm,disp4), FRn
**	8Ev0-Fnm9 PMOV.S @Rm+, FRn
**	8Evd-FnmA PMOV.S FRm, @(Rn,disp4)
**	8Ev0-FnmB PMOV.S FRm, @-Rn

** 8Ev0-FnmC
***		8Evv-FnmC FMOV FRm, FRn		//S: FPU MOV
***		8Evv-FnmC PMOV FRm, FRn		//V: Packed MOV

**	F--D
***		8Evv-Fn0D PSTS FPUL, FRn
***		8Evv-Fm1D PLDS FRm, FPUL
***		8Evv-Fn2D ? FRn
***		8Evv-Fm3D ? FRm
***		8Evv-Fn4D PNEG FRn		//Negate packed values
***		8Evv-Fn5D PABS FRn		//Absolute of packed values
***		8Evv-Fn6D ? FRn
***		8Evm-Fn7D PSHUF Rm, FRn			//Shuffle (R0=Mask)
***		8Ev0-Fn8D PCNVBH FPUL, FRn	//packed conv byte->half
***		8Ev0-Fn9D PCNVHB FRm, FPUL	//packed conv half->byte
***		8Ev0-FnAD PCNVBW FPUL, FRn	//packed conv byte->word
***		8Ev0-FnBD PCNVWB FRm, FPUL	//packed conv word->byte
***		8Evv-F-CD -
***		8Eii-FiDD PSETMD	//Packed Set Mode (Ext/Resv)
***		8Evv-FnED PDDPR		//Packed Dot Product
***		F-FD
****			F0FD / FSCA			//Sin/Cos
****			F1FD / FTRV2
****			F2FD / FSCA			//
****			F3FD FSCHG			//Flips FPSCR.SZ
****			F4FD / FSCA			//
****			F5FD / FTRV2
****			F6FD / FSCA			//
****			F7FD / FPCHG		//Flips FPSCR.PR
****			F8FD / FSCA			//
****			F9FD / FTRV2
****			FAFD / FSCA			//
****			FBFD / FRCHG		//Flips FPSCR.FR
****			FCFD / FSCA			//
****			FDFD / FTRV2
****			FEFD / FSCA			//
**	FnmE FMAC FRm, FRn
**	FooF ? (Escape 32 for FPU/SIMD Ops)


=== Instructions (Drop, 64-bit I-Forms) ===

64-Bit I-Forms
*	8EFn-8Em6-vodd-dddd PMOV.S @(Ro,Rm,disp24), FRn
*	8EFn-8Em7-vodd-dddd PMOV.S FRm, @(Ro,Rn,disp24)
*	8EFn-8Em8-vddd-dddd PMOV.S @(Rm,disp28), FRn
* 	8EFn-8Em9-vddd-dddd PMOV.S -
*	8EFn-8EmA-vddd-dddd PMOV.S FRm, @(Rn,disp28)
* 	8EFn-8EmB-vddd-dddd PMOV.S -

