ISA:
* This is a working spec for an extended version of the SH ISA.
** This is based mostly on SH4 (Hitachi SuperH)
* Details here are subject to change without warning.


== Overview ==

=== Registers ===

Registers:
*	Registers will be 32 or 64 bits.
*	R0..R15: General-Purpose Registers
**		R15/SP: Stack Pointer
*	SR: Status Register
*	GBR: Global Base Register
*	VBR: Vector Base Register
*	SSR: Saved Status Register
*	SPC: Saved PC
*	SGR: Saved R15/SP
*	DBR: Debug Base Register	
*	MACH: Multiply-Accumulate High
*	MACL: Multiply-Accumulate Low
*	PR: Procedure Register (Call/Return)
*	FPSCR: FPU Control Register
*	FPUL: FPU Load Register

*	PC: Program Counter

*	FR0..FR15: FPU Registers (Bank A)
*	XF0..XF15: FPU Registers (Bank B)
*	YF0..YF15: FPU Registers (Bank C, N/A Basic FPU)
*	ZF0..ZF15: FPU Registers (Bank D, N/A Basic FPU)

*	R0H..R15H: Logical high half of 64-bit registers.
**		Not normally used in 32-bit mode.
**		Implicitly paired to R0..R15 in 64-bit mode.
**		May be absent on 32-bit only cores.

*	R0_A..R7_A: R0..R7 (Bank A, User)
*	R0_B..R7_B: R0..R7 (Bank B, Super)
		Transistions between user and supervisor mode Flip Banks A and B.
		User or Supervisor mode determines which bank R0..R7 map to.

Interrupt:
*	Saves PC in SPC
*	Saves SR in SSR
*	Saves SP in SGR
*	Sets supervisor mode.
**		This swaps the register banks (Setting SR.RB).
**		Set SR.JQ and SR.DQ according to SRH.TR_DQ and SRH.TR_JQ
*	Loads an address as an offset relative to VBR into PC.
*	Return from ISR swaps register banks, and restores SR and PC.

SR Bits:
*	0000_0001: T		//True/False Bit
*	0000_0002: S		//Specifies MAC Saturation
*	0000_00F0: IM		//Interrupt Level Mask
*	0000_0100: Q		//Q Bit (Divide)
*	0000_0200: M		//M Bit (Divide)
*	0000_0400: -
*	0000_0800: -
*	0000_1000: DQ		//Data Quad
*	0000_2000: -
*	0000_4000: -
*	0000_8000: FD		//FPU Disable
*	0FFF_0000: -
*	1000_0000: BL		//Block Interrupts
*	2000_0000: RB		//Register Bank Select
*	4000_0000: MD		//User/Supervisor
*	8000_0000: JQ		//Operate in 64-bit mode

SRH Bits:
*	0000_1000: TR_DQ	//Trap: Data Quad
*	8000_0000: TR_JQ	//Trap: 64-bit Mode

FPSCR bits:
*	0000_0003: RM	//Rounding Mode
*	0004_0000: DN	//Denormalization Mode
*	0008_0000: PR	//Precision
*	0010_0000: SZ	//Load/Store Size
*	0020_0000: FR	//Float Register Bank (Swap FRn/XFn)


Operating Mode:
* SR.JQ will give the current logical operating mode.
** If clear, we are in 32-bit mode.
** If set, we are in 64-bit mode.
* SR.DQ sets the nominal operation size within 64-bit mode.
** If clear, operators work on 32-bit values.
** If set, operators work on 64-bit values.
* SRH.TR_JQ and SRH.TR_DQ do similar, but for exception handlers.
** When an exception occurs, the mode is to be set according to these bits.


=== Operating Modes ===


BJX1-32:
* Operation is mostly equivalent to SH.
* Will support both 29 and 32-bit addressing.
** By default, the initial addressing mode will be 29 bit.
* Limited to the same register space as SH.
* SR.JQ and DQ will be invalid on BJX1-32 cores.

BJX1-64:
* Will boot directly in 64-bit mode, and use a different memory map.
* Uses a 48 bit address space with 40 bit external addresses.
* Boot: JQ=1, DQ=0.


=== Addressing and MMU ===

Address Space:
*	Unsigned 29 or 32 bit.
*	Legacy mode uses a 29-bit physical space
**		High 3 bits of address indicate access mode.
**		0/1/2/3: User-Mode, Cache+MMU
**		4: Cache, No MMU
**		5: Non-Cache, No MMU
**		6: Cache, MMU
**		7: Non-Cache, Special
*	BJX1 Mode, may use a logical 32-bit or 48-bit space.
*	Modified 32-bit Address Space (JQ=0, AT=1)
**		0000_0000..7FFF_FFFF: User, MMU
**		8000_0000..BFFF_FFFF: User/System, MMU
**		C000_0000..DFFF_FFFF: System, MMU
**		E000_0000..EFFF_FFFF: Chipset and MMIO
**		F000_0000..FFFF_FFFF: Processor and Chipset
*	48-bit Address Space (JQ=1, AT=1)
**		0000_0000_0000..7FFF_FFFF_FFFF: User, MMU
**		8000_0000_0000..8000_FFFF_FFFF: 32-bit Space
**		8001_0000_0000..807F_FFFF_FFFF: External RAM
**		80A0_0000_0000..80DF_FFFF_FFFF: MMIO
**		9000_0000_0000..FFFF_FFFF_FFFF: System, MMU


MMU: An MMU may be used. It will be based on page-tables.

A 32-bit page table will be two level, with each page consisting of 1024 entries (1024*1024*4096=4GB).

Note that this is NOT the standard SH4 MMU.

A 64-bit page table will be four level, with each page consisting of 512 entries (512*512*512*512*4096=256TB).

This will give a 48-bit logical address space, which is sign-extended to 64 bits.



=== Delay Slot ===

Delay Slot:
For branches, the instruction immediately following the branch is located in a "delay slot". This instruction will execute prior to the jump landing at the target. Branches and PC relative operations are not allowed in this space. However, BT and BF will not execute the delay-slot instruction.

For PC relative instructions, the calculation will be performed relative to 4 bytes after the PC of the current instruction.
* Both Long and Quad operations will use a 32-bit alignment.
* For 32-bit instruction forms, this offset will be 6 bytes.

The endianess of instructions and PC-relative loads will always match the machine endianess.
Loads performed relative to registers will use the local endianess.

Note that 32-bit instruction forms will not be allowed in the delay slot.


=== Instruction Notation ===

Opcode Size Suffixes:
* .B, Byte (8-bit)
* .W, Word (16-bit)
* .L, DWord (32-bit)
* .Q, QWord (64-bit)
* .W/Q, Word or Quad (Depends on Mode, Usually SR.DQ)
* .L/Q, DWord or Quad (Depends on Mode, Usually SR.JQ)
* .Q/W, Quad or Word (Depends on Mode, Usually SR.DQ)
** Basically, the reverse of W/Q
* ./Q, DWord (No Suffix) or Quad (with suffix, if SR.DQ is Set)

QWORD Loads/Stores may not be used in 32-bit mode.
* Registers will only preserve 32 bits.
* MOVA.Q is still valid in 32-bit mode.

Normal instructions will be 16 bit, and are expressed here as nibbles.
* 0..9, A..F: Expresses a literal hex value.
* m: Expresses a source register.
* n: Expresses a destination register.
* M: Expresses a source register as 0-7 with high-bit set.
* N: Expresses a destination register as 0-7 with high-bit set.
* d: Expresses a displacement.
* i: Expresses an immediate value (signed)
* j: Expresses an immediate value (unsigned)

Displacements:
* Are normally scaled by the size of the data type.
* disp4, disp8, and disp12 are zero extended.
* disp8s is sign-extended.


Memory Addressing Modes
* @Rm
** Access memory via address in Rm
* @Rm+
** Load from address in Rm, incrementing the address
* @-Rn
** Store to address given in Rn, first decrementing the address
* @(R0,Rm)
** Load or store to address given by R0+Rm
* @(PC,Rm)
** Load or store to address given by PC+Rm
** PC is typically the start address of the instruction +4.
** For 32-bit instructions, it is +6.
* @(GBR,disp)
** Memory access is GBR + a scaled displacement.
* @(Rm, disp)
** Address is Rm with a displacement scaled by the value size.
* @(Rm, Ro, disp)
** Address is given by Rm+(Ro+Disp)*Scale
** If Ro is R0, then Scale is 1 (Byte).
** If Ro is R15, then Ro is treated as if it held 0.


== Base ISA ==

If an instruction is preceded with a '/', it is not implemented, but more just to declare that a space is reserved for this instructions.

Instructions precded with '!' are extensions specific to this VM or ISA.
* '!?', possible, but debatable.
* '!!', very uncertain.

SHAD/SHLD Shift (32-bit)
* 000n-nnnn		//Shift Left N bits
* 111n-nnnn		//Shift Right (32-N) bits
* 1110-0000		//All bits are bit 31
* Other cases will depend on sign and are mod32.

SHAD/SHLD Shift (64-bit, Shift by Register)
* 00nn-nnnn		//Shift Left N bits
* 11nn-nnnn		//Shift Right (64-N) bits
* 1100-0000		//All bits are bit 63
* Other cases will depend on sign and are mod64.

SHLL with variable shift
* Behaves like SHLD with a positive shift

SHLR with variable shift
* Behaves like SHLD with a negative shift if shift>0
* 0 behaves like SHLD with 0
* Negative values are undefined.

SHAR with variable shift
* Behaves like SHAD with a negative shift if shift>0
* 0 behaves like SHAD with 0
* Negative values are undefined.


=== Wide I-Form Ranges ===

The 32-bit I-Forms will be organized into block-ranges.
* 0xx0, MOVI20
* 0xx1, MOVI20S
* 3xx1, MOV I-Forms
* 3xx9, Reserved/Unused
* 82xx, XPFX1
* 83xx, XPFX3
* 86xx, XPFX4
* 87xx, XPFX5
* 8Axx, MOVI24
* 8Cxx, XPFX2
* 8Exx, XPFX0
* CCxx, XPFY0 (BJX1-64 Only)
* CDxx, XPFY1 (BJX1-64 Only)
* CExx, XPFZ0 (BJX1-64 Only)
* CFxx, XPFZ1 (BJX1-64 Only)
* FxxF, XPFV0 (FPU/SIMD)

XPFZ0/1 will be reserved for very-wide I-Forms.


=== Base 16-bit I-Forms ===

Basic I-Forms (16-bit)
* 0---
**	0--0 RES (32-bit ops)
**	0--1 RES (32-bit ops)
**	0--2
***		0n02 STC./Q SR, Rn			//Copy SR to Rn
***		0n12 STC./Q GBR, Rn		//Copy GBR to Rn
***		0n22 STC./Q VBR, Rn		//Copy VBR to Rn
***		0n32 STC./Q SSR, Rn		//Copy SSR to Rn
***		0n42 STC./Q SPC, Rn		//Copy SPC to Rn
***		0n52 -
***		0-62 -
***		0-72 -
***		0nM2 STC./Q Rm_B, Rn		//Copy Rm_B to Rn (Other Bank)
**	0--3
***		0m03 BSRF Rm			//Branch to Subroutine (PC+Rm+4)
***		0-13 -
***		0m23 BSAF Rm			//Branch to Label (PC+Rn+4)
***             ..

***		0n63 -
***		0n73 -

***		0n83 PREF @Rn			//Prefetch memory for address
***		0n93 -
***		0nA3 -
***		0nB3 -
***		0nC3 MOVCA.L R0, Rn
***		0nE3 ICBI @Rn			//Invalidates I-Cache at Address
**	0nm4 MOV.B Rm, @(R0,Rn)		//Move Byte Rm to R0+Rn
**	0nm5 MOV.W/Q Rm, @(R0,Rn)	//Move Word Rm to R0+Rn
**	0nm6 MOV.L Rm, @(R0,Rn)		//Move DWord Rm to R0+Rn
**	0nm7 MUL.L Rm, Rn			//Multiply Rm and Rn and store MACL
**	0--8						//Operations without arguments
***		0008 CLRT				//Clear SR.T
***		0018 SETT				//Set SR.T
***		0028 CLRMAC				//Clear MACH and MACL
***		0038 LDTLB				//LDTLB (Not Used)
***		0048 CLRS				//Clear SR.S
****		0148 ICLRMD.DQ		//Clear SR.DQ
****		0248 ICLRMD.JQ		//Clear SR.JQ
****		0348 ICLRMD.JDQ		//Clear SR.JQ and SR.DQ
***		0058 SETS				//Set SR.S
****		0158 ISETMD.DQ		//Set SR.DQ
****		0258 ISETMD.JQ		//Set SR.JQ
****		0358 ISETMD.JQ		//Set SR.JQ and SR.DQ
***		0068 NOTT
**	0--9
***		0i09 NOP				//NOP
***		0019 DIV0U				//Unsigned Divide
***		0n29 MOVT Rn			//Copy T bit to Rn
***		0n39 MOVRT Rn

***		0mA9 MOVUA.L R0, @Rm	//MOV Unaligned
***		0mE9 MOVUA.L R0, @-Rm	//MOV Unaligned

**	0--A
***		0n0A STS./Q MACH, Rn		//Copy MACH to Rn
***		0n1A STS./Q MACL, Rn		//Copy MACL to Rn
***		0n2A STS./Q PR, Rn			//Copy PR to Rn
***		0n3A STC./Q SGR, Rn
***		0n4A -
***		0n5A STS./Q FPUL, Rn		//Copy FPUL to Rn
***		0n6A STS./Q FPSCR, Rn		//Copy FPSCR to Rn

***		0nFA STC./Q DBR, Rn		//Copy DBR to Rn
**	0--B
***		000B RTS				//Return from Function
***		001B SLEEP				//Sleep until interrupt
***		002B RTE				//Return From Exception
***		003B BRK				//Breakpoint Exception
***		004B -
***		005B / RESBANK
***		006B / RTS/N
***		0m7B / RTV/N Rm
***		00AB / SYNCO			//Delay until all preceding operations complete
***             ...		
**	0nmC MOV.B @(R0,Rm), Rn		//Load Byte From R0+Rm into Rn
**	0nmD MOV.W/Q @(R0,Rm), Rn	//Load Word/Quad From R0+Rm into Rn
**	0nmE MOV.L @(R0,Rm), Rn		//Load DWord From R0+Rm into Rn
**	0nmF MAC.L @Rm+, @Rn+		//Load/Mul Rm and Rn and add to MACH/MACL
*** ( Deprecated for BJX1 )
* 1nmd MOV.L Rm, @(Rn,disp)		//Store DWord Rm to Rn+4*Disp
* 2---
**	2nm0 MOV.B Rm, @Rn			//Store Byte Rm to @Rn
**	2nm1 MOV.W/Q Rm, @Rn		//Store Word/Quad Rm to @Rn
**	2nm2 MOV.L Rm, @Rn			//Store Rm to @Rn
**	2nm3 CAS.L Rm, Rn, @R0		//Compare and Exchange
**	2nm4 MOV.B Rm, @-Rn			//Store Rm to Byte @Rn then Rn=Rn-1
**	2nm5 MOV.W/Q Rm, @-Rn		//Store Rm to Word/Quad @Rn then Rn=Rn-2|8
**	2nm6 MOV.L Rm, @-Rn			//Store Rm to DWord @Rn then Rn=Rn-4
**	2nm7 DIV0S Rm, Rn			//Setup for signed division
**	2nm8 TST./Q Rm, Rn			//Test Rm&Rn, updating SR.T
**	2nm9 AND./Q Rm, Rn			//And Rm and Rn, Storing result in Rn
**	2nmA XOR./Q Rm, Rn			//Xor Rm and Rn, Storing result in Rn
**	2nmB OR./Q Rm, Rn			//Or Rm and Rn, Storing result in Rn
**	2nmC CMPSTR Rm, Rn			//Compare Rm and Rn for matching bytes
**	2nmD XTRCT Rm, Rn			//Low bits from Rm and High bits from Rn
**	2nmE MULU.W/Q Rm, Rn		//Multiply Unsigned Word/DWord, Dst=MACL
***		DQ=1: 64x64 -> 128-bit, Result in XMACH:MACH:XMACL:MACL
**	2nmF MULS.W/Q Rm, Rn		//Multiply Signed Word/DWord, Dst=MACL
***		DQ=1: 64x64 -> 128-bit Result in XMACH:MACH:XMACL:MACL
* 3---
**	3nm0 CMPEQ./Q Rm, Rn		//Compare for Equality
**	3--1 RES (32-bit ops)
**	3nm2 CMPHS./Q Rm, Rn		//Compare for unsigned Greater/Equal
**	3nm3 CMPGE./Q Rm, Rn		//Compare for signed Greater/Equal
**	3nm4 DIV1 Rm, Rn			//Inner part of divide
**	3nm5 DMULU.L Rm, Rn			//Unsigned Multiply, result in MACH:MACL
**	3nm6 CMPHI./Q Rm, Rn		//Compare for unsigned Greater
**	3nm7 CMPGT./Q Rm, Rn		//Compare for signed Greater
**	3nm8 SUB./Q Rm, Rn			//Subtract
**	3--9 RES (32-bit ops)
**	3nmA SUBC./Q Rm, Rn			//Subtract, Carry -> T
**	3nmB SUBV./Q Rm, Rn			//Subtract, Overflow -> T
**	3nmC ADD./Q Rm, Rn			//Add
**	3nmD DMULS.L Rm, Rn			//Signed Multiply, result in MACH:MACL
**	3nmE ADDC./Q Rm, Rn			//Add with Carry, Carry -> T
**	3nmF ADDV./Q Rm, Rn			//Add, Overflow -> T
* 4---
**	4--0
***		4n00 SHLL./Q Rn
***		4n10 DT./Q Rn
***		4n20 SHAL./Q Rn
***		4n80 -
***		4mF0 -
**	4--1
***		4n01 SHLR./Q Rn
***		4n11 CMPPZ./Q Rn
***		4n21 SHAR./Q Rn
***             ..		
***		4n81 -
***		4n91 -
***		4nE1 -
***		4mF1 -
**	4--2
***		4n02 STS.L/Q MACH, @-Rn
***		4n12 STS.L/Q MACL, @-Rn
***		4n22 STS.L/Q PR, @-Rn
***		4n32 STC.L/Q SGR, @-Rn
***		4n42 -
***		4n52 STS.L/Q FPUL, @-Rn
***		4n62 STS.L/Q FPSCR, @-Rn
***		4-72 -
***		..
***		4n62 STS.L/Q DBR, @-Rn
**	4--3
***		4n03 STC.L/Q SR, @-Rn
***		4n13 STC.L/Q GBR, @-Rn
***		4n23 STC.L/Q VBR, @-Rn
***		4n33 STC.L/Q SSR, @-Rn
***		4n43 STC.L/Q SPC, @-Rn
***		4n53 -
***		4n63 -
***		4-63 -
***		4-73 -
***		4nM3 STC.L/Q Rm_B, @-Rn
**	4--4
***		4n04 ROTL./Q Rn
***		4n14 ! ROT32 Rn				//Rn<->RHn
***		4-24 ROTCL./Q Rn
***		4n34 ! SHLL4 Rn				//(Rn<<4)->Rn
***		4n44 EXTU.L Rn			//zero extend 32 -> 64 (zeroes RHn)
***		4n54 EXTS.L Rn			//sign extend 32 -> 64 (sign-extends to RHn)
***		4n64 MOV.Q/W @R0, Rn	//(Alt MOV.W, BJX1-64)
***		4m74 MOV.Q/W Rm, @R0	//(Alt MOV.W, BJX1-64)
***		4n84 / DIVU R0, Rn
***		4n94 / DIVS R0, Rn
***		..
***		4-F4
***		4nF4 -
**	4--5
***		4n05 ROTR./Q Rn				//Rotate Right
***		4n15 CMPPL./Q Rn			//Compare Rn>0
***		4n25 ROTCR./Q Rn
***		4n35 ! SHLR4 Rn				//(Rn>>4)->Rn
***		4n45 ! MOVHI R0, RHn		//R0->RHn
***		4m55 ! MOVHI RHm, R0		//RHm->R0
***		4n65 / MOV.L @PC+, Rn		//Inline load Imm32
***		4n75 / MOV.Q @PC+, Rn		//Inline load Imm64
***		4n85 -
***		4n95 -
***             ..		
***		4mE5 -
***		4nF5 -
**	4--6
***		4m06 LDS.L/Q @Rm+, MACH
***		4m16 LDS.L/Q @Rm+, MACL
***		4m26 LDS.L/Q @Rm+, PR
***		4m36 LDC.L/Q @Rm+, SGR
***		4m46 -
***		4m56 LDS.L/Q @Rm+, FPUL
***		4m66 LDS.L/Q @Rm+, FPSCR
***		4-76 -
***		..
***		4-F6 LDC.L/Q @Rm+, DBR
**	4--7
***		4m07 LDC.L/Q @Rm+, SR
***		4m17 LDC.L/Q @Rm+, GBR
***		4m27 LDC.L/Q @Rm+, VBR
***		4m37 LDC.L/Q @Rm+, SSR
***		4m47 LDC.L/Q @Rm+, SPC
***		4m57 -
***		4-67 -
***		4-77 -
***		4mN7 LDC.L/Q @Rm+, Rm_B
**	4--8
***		4n08 SHLL2./Q Rn
***		4n18 SHLL8./Q Rn
***		4n28 SHLL16./Q Rn
***		4n38 ! SHLL32 Rn		//Rn->RHn, 0->Rn
***		4m48 PUSH.L/Q Rm		//MOV.L/Q Rm, @-R15
***		4n58 POP.L/Q Rn			//MOV.L/Q @R15+, Rn
***		4-68 -
***		...
***		4-F8 -
**	4--9
***		4n09 SHLR2./Q Rn
***		4n19 SHLR8./Q Rn
***		4n29 SHLR16./Q Rn
***		4n39 ! SHLR32 Rn		//RHn->Rn, 0->RHn

***		4mA9 MOVUA.L @Rm, R0	//MOV Unaligned
***		4mE9 MOVUA.L @Rm+, R0	//MOV Unaligned
**	4--A
***		4m0A LDS./Q Rm, MACH
***		4m1A LDS./Q Rm, MACL
***		4m2A LDS./Q Rm, PR
***		4m3A LDC./Q Rm, SGR
***		4m4A -
***		4m5A LDS./Q Rm, FPUL
***		4m6A LDS./Q Rm, FPSCR
***		4-7A -
***		..
***		4-EA -
***		4mFA LDS./Q Rm, DBR
**	4--B
***		4m0B JSR Rm
***		4m1B TAS.B Rm
***		4m2B JMP Rm
***             ..
***		4m4B / JSR/N
***             ..
***		4m8B MOV.B R0, @Rn+
***		4m9B MOV.W/Q R0, @Rn+
***		4mAB MOV.L R0, @Rn+
***		4-BB -
***		4mCB MOV.B @-Rm, R0
***		4mDB MOV.W/Q @-Rm, R0
***		4mEB MOV.L @-Rm, R0
***		4-FB -		
**	4nmC SHAD./Q Rm, Rn
**	4nmD SHLD./Q Rm, Rn
**	4--E
***		4m0E LDC./Q Rm, SR
***		4m1E LDC./Q Rm, GBR
***		4m2E LDC./Q Rm, VBR
***		4m3E LDC./Q Rm, SSR
***		4m4E LDC./Q Rm, SPC
***		4m5E -
***		4-6E -
***		4-7E -
***		4mNE LDC./Q Rm, Rm_B
**	4nmF MAC.W/Q @Rm+, @Rn+
*** ( Deprecated for BJX1 )
* 5nmd MOV.L @(Rm,disp), Rn
* 6---
**	6nm0 MOV.B @Rm, Rn		//Load Byte
**	6nm1 MOV.W/Q @Rm, Rn	//Load Word or Quad
**	6nm2 MOV.L @Rm, Rn		//Load DWord
**	6nm3 MOV./Q Rm, Rn		//MOV Registers
**	6nm4 MOV.B @Rm+, Rn		//Load Byte with post-increment
**	6nm5 MOV.W/Q @Rm+, Rn	//Load Word or Quad with post-increment
**	6nm6 MOV.L @Rm+, Rn		//Loag DWord with post increment
**	6nm7 NOT./Q Rm, Rn		//Bitwise Not
**	6nm8 SWAP.B Rm, Rn		//Swap Low/High bits per Byte
**	6nm9 SWAP.W Rm, Rn		//Swap Low/High bits per Word
**	6nmA NEGC./Q Rm, Rn		//Negate with carry
**	6nmB NEG./Q Rm, Rn		//Negate
**	6nmC EXTU.B Rm, Rn		//Zero Extend Byte
**	6nmD EXTU.W Rm, Rn		//Zero Extend Word
**	6nmE EXTS.B Rm, Rn		//Sign Extend Byte
**	6nmF EXTS.W Rm, Rn		//Sign Extend Word
* 7nii ADD./Q #imm, Rn		//Add immediate to register
* 8---
**	80nd MOV.B R0, @(Rn,disp)	//Store Byte
**	81nd MOV.W/Q R0, @(Rn,disp)	//Store Word or Quad
***		Always Word if disp==0
**	82-- - XPFX1/Escape32B
**	83dd / JSR/N disp
**	84md MOV.B @(Rm,disp), R0
**	85md MOV.W/Q @(Rm,disp), R0
***		Always Word if disp==0
**	86-- / BST / BCLR
**	87-- / BST / BCLR
**	88ii CMPEQ./Q #imm, R0
**	89dd BT label
**	8Aii-iiii MOVI24 #imm24, R0			//32-bit op, loads 24-bit immediate.
**	8Bdd BF label
**  8Cii XPFX2
***		8C0x..8C7x xxxx				//32-bit I-Forms
***		8C8x..8CFx xxxx				//64-bit I-Forms (Resv)
**	8Ddd BTS label
**	8Eii XPFX0/Escape32			//Escape for 32 bit I-Forms
***		Combines with a following instruction to form a new one.
**	8Fdd BFS label
* 9ndd MOV.W/Q @(PC,disp), Rn
**	DQ=0: Load WORD from PC+4+disp*2
**	DQ=1: Load QWORD from PC+4+disp*8 (DWORD Aligned)
* Addd BRA label
* Bddd BSR label
* C---
**	C0dd MOV.B R0, @(GBR,disp)		//32-bit only, BJX1 deprecated
**	C1dd MOV.W/Q R0, @(GBR,disp)	//32-bit only, BJX1 deprecated
**	C2dd MOV.L R0, @(GBR,disp)		//32-bit only, BJX1 deprecated
**	C3jj TRAPA #imm
**	C4dd MOV.B @(GBR,disp), R0		//32-bit only, BJX1 deprecated
**	C5dd MOV.W/Q @(GBR,disp), R0	//32-bit only, BJX1 deprecated
**	C6dd MOV.L @(GBR,disp), R0		//32-bit only, BJX1 deprecated
**	C7dd MOVA @(PC,disp), R0		//Load Address into R0, DWORD aligned.
**	C8jj TST./Q #imm, R0
**	C9jj AND./Q #imm, R0
**	CAjj XOR./Q #imm, R0
**	CBjj OR./Q #imm, R0
**	CCjj TST.B #imm, @(GBR,R0)		//32-bit only, BJX1 deprecated
**	CDjj AND.B #imm, @(GBR,R0)		//32-bit only, BJX1 deprecated
**	CEjj XOR.B #imm, @(GBR,R0)		//32-bit only, BJX1 deprecated
**	CFjj OR.B #imm, @(GBR,R0)		//32-bit only, BJX1 deprecated
* Dndd MOV.L @(PC,disp), Rn			//Load DWord, DWord aligned.
** DQ=1: Result extended to QWord
* Enii MOV./Q #imm, Rn				//Load immediate into register.
* Fxxx: FPU/SIMD Block


=== Basic FPU ===

For full FPU, see NVSIMD Spec.
* A core may opt to instead provide a more basic FPU.
** Basic FPU will only provide for scalar operation.
* Or, none at all.
* ! will denote patterns that are in-use but unavailable in Basic FPU.

FPU (32-bit):
*	FPU Registers are 32-bit and hold single or split-double values
*	The FPUSCR.SZ bit controls whether to copy a single or register pair.
*	The FPUSCR.PR bit selects between Single and Split-Double calculations.

FPU (64-bit):
*	NV SIMD Spec covers the Full FPU
*	64-bit operation will be basically the same as 32-bit operation.
*	The FPU is basically a superset of the traditional FPU.


FPU Ops
* F---
**	Fnm0 FADD FRm, FRn
**	Fnm1 FSUB FRm, FRn
**	Fnm2 FMUL FRm, FRn
**	Fnm3 FDIV FRm, FRn
**	Fnm4 FCMPEQ FRm, FRn
**	Fnm5 FCMPGT FRm, FRn
**	Fnm6 FMOV.S @(R0,Rm), FRn
**	Fnm7 FMOV.S FRm, @(R0,Rn)
**	Fnm8 FMOV.S @Rm, FRn
**	Fnm9 FMOV.S @Rm+, FRn
**	FnmA FMOV.S FRm, @Rn
**	FnmB FMOV.S FRm, @-Rn
**	FnmC FMOV FRm, FRn
**	F--D
***		Fn0D FSTS FRn
***		Fm1D FLDS FRm
***		Fn2D FLOAT FRn
***		Fm3D FTRC FRm
***		Fn4D FNEG FRn
***		Fn5D FABS FRn
***		Fn6D FSQRT FRn
***		F-7D !
***		Fn8D FLDI0 FRn		//Load 0.0
***		Fn9D FLDI1 FRn		//Load 1.0
***		FnAD FCNVSD FRn
***		FnBD FCNVDS FRm
***		F-CD !
***		FiDD PSETMD #imm4
***		F-ED !
***		F-FD
****			F0FD !
****			F1FD !
****			F2FD !
****			F3FD FSCHG			//Flips FPSCR.SZ
****			F4FD !
****			F5FD !
****			F6FD !
****			F7FD FPCHG			//Flips FPSCR.PR
****			F8FD !
****			F9FD !
****			FAFD !
****			FBFD FRCHG			//Flips FPSCR.FR
****			FCFD !
****			FDFD !
****			FEFD !
**	FnmE FMAC FRm, FRn
**	F--F ! (BT Reserved-32)

The behavior of FPU operations will depend on FPSCR.PR and FPSCR.SZ:
* (PR=0, SZ=0): Arithmetic operators operate on Float, FMOV.S is also Float.
* (PR=1, SZ=0): Arithmetic operators operate on Double, FMOV.S is still Float.
* (PR=0, SZ=1): Arithmetic operators will operate on Float, FMOV.S is Pair.
** Copies a pair of floats, which are reversed on Little-Endian targets.
* (PR=1, SZ=1): BJX1, both arithmetic and FMOV.S will operate on Double.
** In BJX1, this will put the two halves in the correct order.

Likewise, there will be FPSCR.FR:
* When 0, Banks A and B will be in their normal order.
* When 1, Banks A and B will be swapped.
** This swaps FRn and XFn for Float operations.
** This swaps Even/Odd doubles for Double operation.


PSETMD 4-bit
* imm4=zpmm
** z: FPSCR.SZ
** p: FPSCR.PR
** mm: Rounding Mode
* Other bits for FPSCR are left as-is.

Behahior:
* Float operations will operate of FR0..FR15.
** FPSCR.FR will allow alternating between FR0..FR15 and XF0..XF15.
* Double operations will operate on Pairs.
** Even=(FR1, FR0), (FR3, FR2), ...
** Odd=(XF1, XF0), (XF3, XF2), ...
** In BJX1, there will be 16 logical double registers.
** In legacy operation, only the 8 even doubles are accessible.


Basic FPU will also include a few 32-bit forms:
*	8Evo-Fnm6 FMOV.S @(Rm,Ro), FRn
*	8Evo-Fnm7 FMOV.S FRm, @(Rn,Ro)
*	8Evd-Fnm8 FMOV.S @(Rm,disp4), FRn
*	8Ev0-Fnm9 FMOV.S @Rm+, FRn
*	8Evd-FnmA FMOV.S FRm, @(Rn,disp4)
*	8Ev0-FnmB FMOV.S FRm, @-Rn
*	8Evv-FnmC FMOV FRm, FRn		//S: FPU MOV

*	8Eii-FiDD PSETMD #imm12		//Packed Set Mode (Ext/Resv)

VV (FMOV/PMOV):
* wwww-xxyy
* wwww:
** 0000: FRm, FRn	//Copy FRn
** 0001:
** 0010:
** 0011:  Rm, FRn	//Copy GPR to FRn (FMOV.IS)
** 0100:
** 0101: DRm, DRn	//Copy DRn
** 0110:
** 0111: Rm, DRn	//Copy GPR to DRn
** 1000: Rm, Rn		//Copy GPR (MOV.L)
** 1001:
** 1010: Rm, Rn		//Copy GPR (MOV.Q)
** 1011:
** 1100: FRm,  Rn	//Copy FRm to GPR (FMOV.SI)
** 1101: DRm,  Rn	//Copy DRm to GPR (Rn, RnH)
** 1110:
** 1111: ! XRm, XRn
* xx: Bit4/5 of Rn
* yy: Bit4/5 of Rm


VV (PMOV.S):
* wwxy
* ww=00: FRn
* ww=01: DRn
** Loads (FRn+0,FRn+1)
* ww=10: DRn
** Loads value in correct ordering for Double
* ww=11: ! XRn

PSETMD 12-bit
* imm12=000v-wwfz-pdmm
* v: ! VE
** Reserved (Set to 0) in Basic FPU.
* ww: ! Swap Mode
** Reserved (Set to 0) in Basic FPU.
* f: FR
* z: SZ
* p: PR
* d: DN
* mm: Rounding Mode
* Other bits for FPSCR are cleared to 0.


=== Misc 32-bit I-Forms ===

32-bit I-Forms (currently unsupported, reserved):
* 0ni0-iiii MOVI20 #imm, Rn
* 0ni1-iiii MOVI20S #imm, Rn

* 3nm1-0ddd MOV.B Rm, @(Rn, disp)
* 3nm1-1ddd MOV.W Rm, @(Rn, disp)
* 3nm1-2ddd MOV.L Rm, @(Rn, disp)
* 3nm1-3ddd FMOV.S FRm, @(Rn, disp)
* 3nm1-4ddd MOV.B @(Rm, disp), Rn
* 3nm1-5ddd MOV.W @(Rm, disp), Rn
* 3nm1-6ddd MOV.L @(Rm, disp), Rn
* 3nm1-7ddd FMOV.S @(Rm, disp), FRn
* 3nm1-8ddd MOVU.B @(Rm, disp), Rn
* 3nm1-9ddd MOVU.W @(Rm, disp), Rn

* 3ni9-Xddd !
** This group of instructions is not present in BJX1.


=== XPFX0: General 32-bit I-Forms ===

For XPFX0 I-Forms
* The prefix will give the high bits of multi-part immediates for 32-bit I-Forms.
* 8E12 EC34: MOV 0x1234, R12
* The endianess of each instruction WORD will depend on the target.


XPFX0/Escape32 I-Forms
*	0---
**      8Eoo-0oo0 (Resv)
**      8Eoo-0oo1 (Resv)
**      8Eoo-0oo2 (Resv)
**      8Eoo-0oo3 (Resv)
**		8Eod-0nm4 MOV.B Rm, @(Rn,Ro,disp4)	//Move Byte Rm to Rn+(Ro+disp)
**		8Eod-0nm5 MOV.W Rm, @(Rn,Ro,disp4)	//Move Word Rm to Rn+(Ro+disp)*2
**		8Eod-0nm6 MOV.L Rm, @(Rn,Ro,disp4)	//Rn+(Ro+disp)*4
**		8Eod-0nm7 MOV.Q Rm, @(Rn,Ro,disp4)	//Rn+(Ro+disp)*8
**      8Eoo-0oo8 (Resv Ext No-Arg Ops)
**      8Eno-0oo9 (Resv Ext Unary Ops)
**      8Enm-0ooA Resv
**      8Enm-0ooB (Resv Ext Binary Ops)
**		8Eod-0nmC MOV.B @(Rm,Ro,disp4), Rn	//Load Byte At Rm+Ro+disp into Rn
**		8Eod-0nmD MOV.W @(Rm,Ro,disp4), Rn	//Load Word At Rm+(Ro+disp)*2 into Rn
**		8Eod-0nmE MOV.L @(Rm,Ro,disp4), Rn	//Load DWord
**		8Eod-0nmF MOV.Q @(Rm,Ro,disp4), Rn	//Load QWord
* 	8Edd-1nmo MOV.L Rm, @(Rn,Ro,disp8s)		//Rn+4*(Ro+Disp)
*	2---
**		8Edd-2nm0 MOV.B Rm, @(Rn,disp8s)	//Store Byte Rm to @Rn
**		8Edd-2nm1 MOV.W Rm, @(Rn,disp8s)	//Store Word Rm to @Rn
**		8Edd-2nm2 MOV.L Rm, @(Rn,disp8s)	//Store DWord
**		8Edd-2nm3 MOV.Q Rm, @(Rn,disp8s)	//Store QWord
**		8Edd-2nm4 FMOV.S FRm, @(Rn,disp8s)	//Store Float
**		8Edd-2nm5 ? FMOV.D DRm, @(Rn,disp8s)	//Store Double
**		8Edd-2nm6 FMOV.S @(Rm,disp8s), FRn	//Load Float
**		8Edd-2nm7 ? FMOV.D @(Rm,disp8s), DRn	//Load Double
**		8Edd-2nm8 -
**		8Eii-2nm9 AND./Q Rm, #imm8, Rn			//Rn=Rm&Imm8
**		8Eii-2nmA XOR./Q Rm, #imm8, Rn			//
**		8Eii-2nmB OR./Q Rm, #imm8, Rn			//
**		8Eeo-2nmC -
**		8Eeo-2nmD -
**		8Eii-2nmE MULL./Q Rm, #imm8, Rn		//Rn=Rm*Imm8
**		8Eii-2nmF -
*	3---
**		8Eii-3ni0 CMPEQ./Q #imm12, Rn		//Compare for unsigned Greater/Equal
**		8Eii-3ni1 -
**		8Eii-3ni2 CMPHS./Q #imm12, Rn		//Compare for unsigned Greater/Equal
**		8Eii-3ni3 CMPGE./Q #imm12, Rn		//Compare for signed Greater/Equal
**		8Edd-3nm4 -
**		8Edd-3nm5 -
**		8Eii-3ni6 CMPHI./Q #imm12, Rn		//Compare for unsigned Greater
**		8Eii-3ni7 CMPGT./Q #imm12, Rn		//Compare for signed Greater
**		8Eii-3nm8 SUB./Q Rm, #imm8, Rn		//Rn=Rm-Imm8
**		8Eii-3ni9 -
**		8Edd-3nmA -
**		8Edd-3nmB -
**		8Eii-3nmC ADD./Q Rm, #imm8, Rn		//Rn=Rm+Imm8
**		8Edd-3nmD -
**		8Edd-3nmE -
**		8Edd-3nmF -
*	4---
**		8Exx-4xx0 -
**		...
**		8Exx-4xx3 -
**		8Exx-4xx4
***			8Eii-4n84 MOV.B #imm, @Rn			//Store Imm to memory
***			8Eii-4n94 MOV.W #imm, @Rn			//
***			8Eii-4nA4 MOV.L #imm, @Rn			//
***			8Eii-4nB4 MOV.Q #imm, @Rn			//
***			8Eii-4nC4 MOV.B #imm, @-Rn			//Store Imm to memory (Dec)
***			8Eii-4nD4 MOV.W #imm, @-Rn			//
***			8Eii-4nE4 MOV.L #imm, @-Rn			//
***			8Eii-4nF4 MOV.Q #imm, @-Rn			//
**		8Exx-4xx5 -
**		...
**		8Exx-4xxB -
**		8Eii-4nmC SHAD./Q Rm, #imm, Rn		//Rn=Rm SAL Imm8 | Rn=Rm SAR Imm8
**		8Eii-4nmD SHLD./Q Rm, #imm, Rn		//Rn=Rm SHL Imm8 | Rn=Rm SHR Imm8
**		8Exx-4xxE -
**		8Exx-4xxF -
*	8Edd-5nmo MOV.L @(Rm,Ro,disp), Rn		//Rm+(Ro+disp)*4
*	6---
**		8Edd-6nm0 MOV.B @(Rm,disp8s), Rn
**		8Edd-6nm1 MOV.W @(Rm,disp8s), Rn
**		8Edd-6nm2 MOV.L @(Rm,disp8s), Rn
**		8Edd-6nm3 MOV.Q @(Rm,disp8s), Rn
**		8Eod-6nm4 LEA.B @(Rm,Ro,disp4), Rn	//Load Byte At Rm+Ro+disp into Rn
**		8Eod-6nm5 LEA.W @(Rm,Ro,disp4), Rn	//Load Word At Rm+(Ro+disp)*2 into Rn
**		8Eod-6nm6 LEA.L @(Rm,Ro,disp4), Rn	//Load DWord
**		8Eod-6nm7 LEA.Q @(Rm,Ro,disp4), Rn	//Load QWord
**		8Edd-6nm8 LEA.B @(Rm,disp8s), Rn	//Rn=Rm+disp*1
**		8Edd-6nm9 LEA.W @(Rm,disp8s), Rn	//Rn=Rm+disp*2
**		8Edd-6nmA LEA.L @(Rm,disp8s), Rn	//Rn=Rm+disp*4
**		8Edd-6nmB LEA.Q @(Rm,disp8s), Rn	//Rn=Rm+disp*8
**		8Edd-6nmC MOVU.B @(Rm,disp8s), Rn	//Rm+disp*1
**		8Edd-6nmD MOVU.W @(Rm,disp8s), Rn	//Rm+disp*2
**		8Edd-6nmE MOVU.L @(Rm,disp8s), Rn	//Rm+disp*4
**		8Edd-6nmF -

*	8Eii-7nii ADD./Q #imm16, Rn
* 	8---
**		8Edd-80no -
**		8Edd-81no -
**		8Edd-82dd BRA/N disp16				//BRA, No Delay Slot
**		8Edd-83dd BSR/N disp16				//BSR, No Delay Slot
**		8Edd-84mo -
**		8Edd-85mo -
**		8Edd-86mo -
**		8Edd-87mo -
**		8Eii-88ii CMPEQ #imm16, R0
**		8Edd-89dd BT disp16
**		8Eii-8Aii LDHF16 #imm, FPUL			//Load Half Imm16 into FPUL Float
**		8Edd-8Bdd BF disp16
**		8Eii-8Cii LDSH16 #imm, R0			//R0=(R0 SHL 16)|Imm16  (QWord)
**		8Edd-8Ddd BTS disp16
**		8Exx-8Exx -
**		8Edd-8Fdd BFS disp16
*	8Edd-9ndd MOVA @(PC,disp13), Rn			//Rn=PC+disp16*4, DWord Aligned
**		8E0d-9ndd MOVA @(PC,disp13), Rn		//disp*4, Load DWord Addr
**		8E2d-9ndd MOVU.W @(PC,disp13), Rn	//disp*2, Load Word (Zero Ext)
**		8E4d-9ndd FMOV.S @(PC,disp13), FRn	//disp*4, Load Float
**		8E6d-9ndd MOVU.W @(PC,disp13), RHn	//disp*2, Load High Word (Z Ext)
**		8E8d-9ndd FMOV.S @(PC,disp13), XFn	//disp*4, Load Float
**		8EAd-9ndd MOVU.W @(PC,disp13), RQn	//disp*2, Load Word (Z Ext Quad)
**		8ECd-9ndd FMOV.D @(PC,disp13), YDn	//disp*4, Load Double
**		8EEd-9ndd FMOV.D @(PC,disp13), DRn	//disp*4, Load Double
*	8Edd-Addd BRA disp20
*	8Edd-Bddd BSR disp20
*	C---
**		8Exx-C0xx -
**		8Exx-C1xx -
**		8Exx-C2xx -
**		8Exx-C3xx -
**		8Exx-C4xx -
**		8Exx-C5xx -
**		8Exx-C6xx -
**		8Exx-C7xx -
**		8Ejj-C8nj TST./Q #imm12, Rn
**		8Ejj-C9nj AND./Q #imm12, Rn
**		8Ejj-CAnj XOR./Q #imm12, Rn
**		8Ejj-CBnj OR./Q #imm12, Rn
**		8Exx-CCxx -
**		8Exx-CDxx -
**		8Exx-CExx -
**		8Exx-CFxx -

*	8Eed-Dndd MOV.W/L/Q @(PC,disp13), Rn	//
**		8E0d-Dndd MOV.L @(PC,disp13), Rn	//disp*4, Load DWord
**		8E2d-Dndd MOV.W @(PC,disp13), Rn	//disp*2, Load Word (Sign Ext)
**		8E4d-Dndd MOV.L @(PC,disp13), RHn	//disp*4, Load High DWord
**		8E6d-Dndd MOV.W @(PC,disp13), RHn	//disp*2, Load High Word
**		8E8d-Dndd MOV.L @(PC,disp13), RQn	//disp*4, Load DWord (S Ext Quad)
**		8EAd-Dndd MOV.W @(PC,disp13), RQn	//disp*2, Load Word (S Ext Quad)
**		8ECd-Dndd MOVU.L @(PC,disp13), RQn	//disp*4, Load DWord (Z Ext Quad)
**		8EEd-Dndd MOV.Q @(PC,disp13), RQn	//disp*4, Load QWord

*	8Eii-Enii MOV./Q #imm16, Rn
*	8Exx-Fxxx (Ext-FPU / SIMD)


=== XPFX2-OPREX: Explicit Reg/Size Forms ===

XPFX2
* 8C0e-xxxx: OPREX Prefix
** Extends arithmetic operators with an explicit size and extended registers.
* e: QNMB
* Q: 0=Single/DWORD (.L or .S), 1=Double/QWORD (.Q or .D)
** Arithmetic operations here will typically have an explicit size.
* N: Bit 4 for Rn
* M: Bit 4 for Rm
** GPR: Selects Rn/RHn
** FPR: Selects FRn/XFn
* B: Bank/Ro/...
** GPR: Reserved
** FPR: Reserved

XPFX2 I-Forms
* 0---
* 1---
**	8C0e-1nmd MOV.L Rm, @(Rn,disp5)		//Store DWord Rm to Rn+4*Disp
**	8C0e-1nmd MOV.Q Rm, @(Rn,disp5)		//Store QWord Rm to Rn+8*Disp
* 2---
**	8C0e-2nm0 MOV.B Rm, @Rn			//Store Byte Rm to @Rn
**	8C0e-2nm1 MOV.W Rm, @Rn			//Store Word/Quad Rm to @Rn
**	8C0e-2nm2 MOV.L Rm, @Rn			//Store Rm to @Rn
**	8C0e-2nm3 -
**	8C0e-2nm4 MOV.B Rm, @-Rn		//Store Rm to Byte @Rn then Rn=Rn-1
**	8C0e-2nm5 MOV.W Rm, @-Rn		//Store Rm to Word/Quad @Rn then Rn=Rn-2|8
**	8C0e-2nm6 MOV.L Rm, @-Rn		//Store Rm to DWord @Rn then Rn=Rn-4
**	8C0e-2nm7 -
**	8C0e-2nm8 TST Rm, Rn			//Test Rm&Rn, updating SR.T
**	8C0e-2nm9 AND Rm, Rn			//And Rm and Rn, Storing result in Rn
**	8C0e-2nmA XOR Rm, Rn			//Xor Rm and Rn, Storing result in Rn
**	8C0e-2nmB OR Rm, Rn				//Or Rm and Rn, Storing result in Rn
**	8C0e-2nmC -
**	8C0e-2nmD -
**	8C0e-2nmE -
**	8C0e-2nmF -
* 3---
**	8C0e-3nm0 CMPEQ Rm, Rn			//Compare for Equality
**	8C0e-3nm2 CMPHS Rm, Rn			//Compare for unsigned Greater/Equal
**	8C0e-3nm3 CMPGE Rm, Rn			//Compare for signed Greater/Equal
**	8C0e-3nm6 CMPHI Rm, Rn			//Compare for unsigned Greater
**	8C0e-3nm7 CMPGT Rm, Rn			//Compare for signed Greater
**	8C0e-3nm8 SUB Rm, Rn				//Subtract
**	8C0e-3nmA SUBC Rm, Rn			//Subtract, Carry -> T
**	8C0e-3nmB SUBV Rm, Rn			//Subtract, Overflow -> T
**	8C0e-3nmC ADD Rm, Rn				//Add
**	8C0e-3nmE ADDC Rm, Rn			//Add with Carry, Carry -> T
**	8C0e-3nmF ADDV Rm, Rn			//Add, Overflow -> T
* 4---
* 5---
**	8C0e-5nmd MOV.L @(Rm,disp5), Rn		//Load DWord From Rm+4*Disp
**	8C0e-5nmd MOV.Q @(Rm,disp5), Rn		//Load QWord From Rm+8*Disp
* 6---
**	8C0e-6nm0 MOV.B @Rm, Rn				//Q: Sign extend to QWord
**	8C0e-6nm1 MOV.W @Rm, Rn				//Q: Sign extend to QWord
**	8C0e-6nm2 MOV.L @Rm, Rn				//Q: Sign extend to QWord
**	8C0e-6nm3 MOV Rm, Rn
**	8C0e-6nm4 MOV.B @Rm+, Rn
**	8C0e-6nm5 MOV.W @Rm+, Rn
**	8C0e-6nm6 MOV.L @Rm+, Rn
**	8C0e-6nm7 NOT Rm, Rn
**	8C0e-6nm8 -
**	8C0e-6nm9 -
**	8C0e-6nmA NEGC Rm, Rn
**	8C0e-6nmB NEG Rm, Rn
**	8C0e-6nmC EXTU.B Rm, Rn
**	8C0e-6nmD EXTU.W Rm, Rn
**	8C0e-6nmE EXTS.B Rm, Rn
**	8C0e-6nmF EXTS.W Rm, Rn

**	8C0e-Enii MOV #imm10, Rn	//Load 10-bit constant, supports Quad


=== XPFX2-TACB: Three Address Block ===

* 8C3e-bnst						// 3-Address Binary Operator
** e: QNST
*** Q: 0=Single/DWORD, 1=Double/QWORD
*** N: Bit 4 for Rn
*** S: Bit 4 for Rs (or Shift Bit 5)
*** T: Bit 4 for Rt (or Shift Bit 4)
** 8C3e-0nst ADD Rs, Rt, Rn		// Rn=Rs+Rt
** 8C3e-0nsi ADD.L Rs, imm5, Rn	// (Q=1&S=1) Rn=Rs+imm5
** 8C3e-0nsi ADD.Q Rs, imm6, Rn	// (Q=1&N=1) Rn=Rs+imm6
** 8C3e-1nst SUB Rs, Rt, Rn		// Rn=Rs-Rt
** 8C3e-1nsi SUB.L Rs, imm5, Rn	// (Q=1&S=1) Rn=Rs-imm5
** 8C3e-1nsi SUB.Q Rs, imm6, Rn	// (Q=1&N=1) Rn=Rs-imm6
** 8C3e-2nst MUL Rs, Rt, Rn		// Rn=Rs*Rt
** 8C3e-3nst AND Rs, Rt, Rn		// Rn=Rs&Rt
** 8C3e-4nst OR  Rs, Rt, Rn		// Rn=Rs|Rt
** 8C3e-5nst XOR Rs, Rt, Rn		// Rn=Rs^Rt
** 8C3e-6nst SHLL Rs, Rt, Rn		// (Q=0|e=8) Rn=Rs<<Rt
** 8C3e-6nsi SHLL.L Rs, imm5, Rn	// (Q=1&S=1) Rn=Rs<<imm5
** 8C3e-6nsi SHLL.Q Rs, imm6, Rn	// (Q=1&N=1) Rn=Rs<<imm6
** 8C3e-7nst SHLR Rs, Rt, Rn		// (Q=0|e=8) Rn=Rs>>Rt (Unsigned)
** 8C3e-7nsi SHLR.L Rs, imm5, Rn	// (Q=1&S=1) Rn=Rs>>imm5 (Unsigned)
** 8C3e-7nsi SHLR.Q Rs, imm6, Rn	// (Q=1&N=1) Rn=Rs>>imm6 (Unsigned)
** 8C3e-8nst SHAR Rs, Rt, Rn		// (Q=0|e=8) Rn=Rs>>Rt (Signed)
** 8C3e-8nsi SHAR.L Rs, imm5, Rn	// (Q=1&S=1) Rn=Rs>>imm5 (Signed)
** 8C3e-8nsi SHAR.Q Rs, imm6, Rn	// (Q=1&N=1) Rn=Rs>>imm6 (Signed)
** 8C3e-9nst -
** 8C3e-Anst -
** 8C3e-Bnst -
** 8C3e-Cnst FADD FRs, FRt, FRn		// FRn=FRs+FRt
** 8C3e-Dnst FSUB FRs, FRt, FRn		// FRn=FRs-FRt
** 8C3e-Enst FMUL FRs, FRt, FRn		// FRn=FRs*FRt
** 8C3e-Fnst FDIV FRs, FRt, FRn		// FRn=FRs/FRt


=== XPFZ0: Very Wide Block (Possible) ===

*	CE7n-iiii-iiii-iiii ADD.Q #imm48, Rn	//Add 48-bit Quad Constant
*	CEA0-dddd-dddd-dddd BRA #imm48, Rn		//Branch Disp48
*	CEB0-dddd-dddd-dddd BSR #imm48, Rn		//Call Disp48
*	CEEn-iiii-iiii-iiii MOV.Q #imm48, Rn	//Load 48-bit Quad Constant

