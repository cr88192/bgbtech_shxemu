/*"tests/cl_stub.c"15*/ typedef unsigned char byte;
typedef signed char sbyte;
typedef unsigned short u16;
typedef signed short s16;
typedef unsigned int u32;
typedef signed int s32;
typedef unsigned long long u64;
typedef signed long long s64;
/*24*/ typedef volatile u32 vol_u32;
/*27*/ typedef float f32;
typedef double f64;
/*107*/ typedef __builtin_va_list va_list;
/*120*/ typedef unsigned char bool;
/*130*/ typedef unsigned int size_t;
/*132*/ void putc(int val)
{
while((*(vol_u32*)(0xABCD0100+0x08))&8);
(*(vol_u32*)(0xABCD0100+0x04))=val;
}
/*138*/ void sleep_0();
/*140*/ int kbhit(void)
{return((*(vol_u32*)(0xABCD0100+0x08))&1);}
/*143*/ int getch(void)
{
while(!((*(vol_u32*)(0xABCD0100+0x08))&1))
sleep_0();
return((*(vol_u32*)(0xABCD0100+0x00)));
}
/*150*/ void puts(char*msg)
{
char*s;
/*154*/ s=msg;
while(*s)
{putc(*s++);}
}
/*159*/ void gets(char*buf)
{
char*t;
int i;
/*164*/ t=buf;
while(1)
{
i=getch();
if((i=='\x08')||(i==127))
{
if(t>buf)
{
puts("\x08 \x08");
t--;
}
*t=0;
continue;
}
if(i=='\r')
{putc('\n');break;}
if(i=='\n')
{putc('\n');break;}
putc(i);
*t++ =i;
}
*t=0;
}
/*188*/ void print_hex(u32 v)
{
/*192*/ char*chrs;
chrs="0123456789ABCDEF";
/*195*/ putc(chrs[(v>>28)&15]);
putc(chrs[(v>>24)&15]);
putc(chrs[(v>>20)&15]);
putc(chrs[(v>>16)&15]);
putc(chrs[(v>>12)&15]);
putc(chrs[(v>>8)&15]);
putc(chrs[(v>>4)&15]);
putc(chrs[(v)&15]);
}
/*205*/ void print_hex_n(u32 v,int n)
{
/*209*/ char*chrs;
chrs="0123456789ABCDEF";
/*212*/ if(n>7)putc(chrs[(v>>28)&15]);
if(n>6)putc(chrs[(v>>24)&15]);
if(n>5)putc(chrs[(v>>20)&15]);
if(n>4)putc(chrs[(v>>16)&15]);
if(n>3)putc(chrs[(v>>12)&15]);
if(n>2)putc(chrs[(v>>8)&15]);
if(n>1)putc(chrs[(v>>4)&15]);
if(n>0)putc(chrs[(v)&15]);
}
/*222*/ int print_hex_genw(u32 v)
{
u32 w;
int i;
/*227*/ i=1;
while(v>=16)
/*230*/ {v=v>>4;i++;}
/*243*/ return(i);
}
/*246*/ void print_decimal(int val)
{
char tb[256];
char*t;
int i,k,s;
/*252*/ k=val;s=0;
if(k<0)
{k= -k;s=1;}
/*256*/ t=tb;
if(!k)*t++ ='0';
while(k>0)
{
i=k%10;
*t++ ='0'+i;
k=k/10;
}
if(s)*t++ ='-';
/*266*/ while(t>tb)
{t--;putc(*t);}
}
/*270*/ void print_decimal_n(int val,int num)
{
char tb[256];
char*t;
int i,k,n,s;
/*276*/ k=val;s=0;
if(k<0)
{k= -k;s=1;}
/*280*/ t=tb;n=num;
/*282*/ while(n>0)
{
i=k%10;
*t++ ='0'+i;
k=k/10;
n--;
}
/*292*/ while(t>tb)
{t--;putc(*t);}
}
/*297*/ void print_float(double val)
{
int ip,fp,sg;
/*301*/ sg=0;
if(val<0)
{val= -val;sg=1;}
/*305*/ ip=(int)val;
fp=(int)((val-ip)*1000000);
/*310*/ if(sg)putc('-');
print_decimal(ip);
putc('.');
print_decimal_n(fp,6);
}
/*316*/ void print_float_ss(float val)
{
int ip,fp,sg;
/*320*/ sg=0;
if(val<0.0 f)
{val= -val;sg=1;}
/*324*/ ip=(int)val;
fp=(int)((val-ip)*1000000);
/*329*/ if(sg)putc('-');
print_decimal(ip);
putc('.');
print_decimal_n(fp,6);
}
/*336*/ void printf(char*str,...)
{
va_list lst;
char pcfill;
char*s,*s1;
int v,w;
/*343*/ __builtin_va_start(lst,str);
/*345*/ s=str;
while(*s)
{
if(*s!='%')
{putc(*s++);continue;}
/*353*/ if(s[1]=='%')
{s+=2;putc('%');continue;}
s++;
/*360*/ if(*s=='0')
{
pcfill='0';
s++;
}else
{
pcfill=' ';
}
/*369*/ w=0;
if((*s>='0')&&(*s<='9'))
{
while((*s>='0')&&(*s<='9'))
w=(w*10)+((*s++)-'0');
}
/*380*/ switch(*s++)
{
case'd':
/*384*/ v=__builtin_va_arg(lst,int);
/*388*/ if(w)
{
print_decimal_n(v,w);
}else
{
print_decimal(v);
}
break;
case'X':
v=__builtin_va_arg(lst,int);
/*399*/ if(!w)w=print_hex_genw(v);
print_hex_n(v,w);
break;
case's':
s1=__builtin_va_arg(lst,char*);
puts(s1);
break;
/*407*/ case'p':
s1=__builtin_va_arg(lst,char*);
print_hex((u32)s1);
break;
/*413*/ case'f':
print_float(__builtin_va_arg(lst,double));
break;
/*418*/ default:
break;
}
/*422*/ }
__builtin_va_end(lst);
}
/*427*/ byte*tk_malloc_rov=((void*)0);
/*429*/ void*malloc(int sz)
{
byte*p;
/*433*/ if(!tk_malloc_rov)
{
/*436*/ tk_malloc_rov=(byte*)0x90000000;
}
/*439*/ sz=(sz+3)&(~3);
p=tk_malloc_rov;
tk_malloc_rov=p+sz;
return(p);
/*445*/ }
/*447*/ int free(void*ptr)
{
/*450*/ }
/*452*/ u32 TK_GetTimeMs(void)
{
u32*sreg;
int ms;
/*457*/ sreg=(int*)0x007F8000;
/*459*/ ms=sreg[4];
return(ms);
}
/*463*/ int clock(void)
{
return(TK_GetTimeMs());
/*467*/ }
/*469*/ int main(int argc,char*argv[]);
/*471*/ void __start()
{
char*t_argv[4];
/*475*/ puts("__start: OK A\n");
/*477*/ t_argv[0]="tk_dummy";
main(1,t_argv);
}
/*483*/ typedef struct u64_obj_s u64_obj_t;
struct u64_obj_s{
u32 lo;
u32 hi;
};
/*489*/ u64_obj_t __shllli(u64_obj_t ival,int shl)
{
u64_obj_t oval;
/*493*/ if(!(shl&31))
{
if(!shl)
return(ival);
if(shl==32)
{
oval.lo=0;
oval.hi=ival.lo;
return(oval);
}
/*504*/ oval.lo=0;
oval.hi=0;
return(oval);
}
/*509*/ oval.lo=ival.lo<<shl;
oval.hi=(ival.hi<<shl)|(ival.lo<<(32-shl));
return(oval);
}
/*514*/ u64_obj_t __shrlli(u64_obj_t ival,int shl)
{
u64_obj_t oval;
/*518*/ if(!(shl&31))
{
if(!shl)
return(ival);
if(shl==32)
{
oval.lo=ival.hi;
oval.hi=0;
return(oval);
}
/*529*/ oval.lo=0;
oval.hi=0;
return(oval);
}
/*534*/ oval.hi=ival.hi>>shl;
oval.lo=(ival.lo>>shl)|(ival.hi<<(32-shl));
return(oval);
}
/*539*/ u64_obj_t __sarlli(u64_obj_t ival,int shl)
{
u64_obj_t oval;
u32 m;
/*544*/ m=0;
if(ival.hi&0x80000000)
m=(u32)(-1);
/*548*/ if(!(shl&31))
{
if(!shl)
return(ival);
if(shl==32)
{oval.lo=ival.hi;oval.hi=m;return(oval);}
if(m>0)
{oval.lo=m;oval.hi=m;return(oval);}
oval.lo=0;oval.hi=0;
return(oval);
}
/*560*/ oval.hi=(ival.hi>>shl)|(m<<(32-shl));
oval.lo=(ival.lo>>shl)|(ival.hi<<(32-shl));
return(oval);
}
/*567*/ typedef struct u128_obj_s u128_obj_t;
struct u128_obj_s{
u32 la;
u32 lb;
u32 lc;
u32 ld;
};
/*575*/ u128_obj_t __addxli(u128_obj_t va,u128_obj_t vb)
{
u128_obj_t oval;
u64 t;
/*580*/ t=((u64)va.la)+vb.la;
oval.la=t;t=t>>32;
t=t+((u64)va.lb)+vb.lb;
oval.lb=t;t=t>>32;
t=t+((u64)va.lc)+vb.lc;
oval.lc=t;t=t>>32;
t=t+((u64)va.ld)+vb.ld;
oval.ld=t;
return(oval);
}
/*591*/ u128_obj_t __shrxli(u128_obj_t va,int shl)
{
u128_obj_t oval;
/*595*/ if(!shl)
{return(va);}
if(shl==32)
{
oval.la=va.lb;oval.lb=va.lc;
oval.lc=va.ld;oval.ld=0;
return(oval);
}
/*604*/ if(shl==64)
{
oval.la=va.lc;oval.lb=va.ld;
oval.lc=0;oval.ld=0;
return(oval);
}
/*611*/ if(shl==96)
{
oval.la=va.ld;oval.lb=0;
oval.lc=0;oval.ld=0;
return(oval);
}
/*618*/ oval.la=0x55AA55AA;oval.lb=0x55AA55AA;
oval.lc=0x55AA55AA;oval.ld=0x55AA55AA;
return(oval);
/*623*/ }
