//AHSRC:cparse/cparse_token.c
int BGBCP_GetLinenum();
char *BGBCP_GetFilename();
int BGBCP_CalcLinenum(char *se);
int BGBCP_SetLinenum(char *fname, char *base, int num);
int BGBCP_PushLinenum();
int BGBCP_PopLinenum();
int BGBCP_SkimLinenum(char *s, char **rfn, int *rln);
char *BGBCP_GetLastFileName();
int BGBCP_GetLastLineNumber();
char *BGBCP_EatWhiteOnly(char *s);
char *BGBCP_EatWhiteOnly2(char *s);
char *BGBCP_EatWhite(char *s);
int BGBCP_IsWhiteOnly(char *s);
int BGBCP_IsLineBreak(char *se);
int BGBCP_OpChar(int c);
int BGBCP_PeekChar(char **str);
int BGBCP_ParseChar(char **str);
int BGBCP_EmitChar(char **str, int j);
int BGBCP_NameInitChar(int c);
int BGBCP_NameChar(int c);
char *BGBCP_TokenI(char *s, char *b, int *ty, int lang, int sz);
char *BGBCP_Token(char *s, char *b, int *ty);
void BGBCP_FlushToken(char *s);
int BGBCP_GetTokenCount(void);
char *BGBCP_Token(char *s, char *b, int *ty);
void BGBCP_FlushToken(char *s);
char *BGBCP_TokenGen(char *s, char *b, int *ty);
char *BGBCP_TokenLang(char *s, char *b, int *ty, int lang);
char *BGBCP_TokenCtx(BGBCP_ParseState *ctx, char *s, char *b, int *ty);
char *BGBCP_ReadToken(BGBCP_ParseState *ctx, char **str, int *ty);
//AHSRC:cparse/cparse_misc.c
BCCX_Node *BGBCP_FunArgs(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_GenArgs(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ModuleBuffer(char *name, char *modname, char *buf);
fourcc BGBCP_LangForName(char *name);
char *BGBCP_NameForLang(int lang);
fourcc BGBCP_ArchForName(char *name);
fourcc BGBCP_SubArchForName(int arch, char *name);
char *BGBCP_NameForArch(fourcc arch);
char *BGBCP_NameForSubArch(fourcc arch, fourcc subarch);
fourcc BGBCP_ImageFormatForName(char *name);
BCCX_Node *BGBCP_ModuleBuffer(char *name, char *modname, char *buf);
//AHSRC:cparse/cparse_type.c
BCCX_Node *BGBCP_LookupStructI(BGBCP_ParseState *ctx, char *name);
BCCX_Node *BGBCP_LookupStructI(BGBCP_ParseState *ctx, char *name);
int BGBCP_HashTypeNameI(BGBCP_ParseState *ctx, char *name);
BCCX_Node *BGBCP_LookupTypeI(BGBCP_ParseState *ctx, char *name);
BCCX_Node *BGBCP_LookupStruct(BGBCP_ParseState *ctx, char *name);
BCCX_Node *BGBCP_LookupTypeI(BGBCP_ParseState *ctx, char *name);
BCCX_Node *BGBCP_LookupType(BGBCP_ParseState *ctx, char *name);
int BGBCP_HandleTypedef(BGBCP_ParseState *ctx, BCCX_Node *n);
BCCX_Node *BGBCP_GetStruct(BGBCP_ParseState *ctx, char *name);
BCCX_Node *BGBCP_GetUnion(BGBCP_ParseState *ctx, char *name);
BCCX_Node *BGBCP_GetEnum(BGBCP_ParseState *ctx, char *name);
BCCX_Node *BGBCP_GetStructJ(BGBCP_ParseState *ctx, char *name, int ty);
int BGBCP_CheckTypeName(BGBCP_ParseState *ctx, char *name);
int BGBCP_DefTypeFlag(BGBCP_ParseState *ctx, char *tag);
BCCX_Node *BGBCP_DefClassC(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_DeclAttributeC(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_DefTypeC(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_DefClassJ(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_DefTypeJ(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_DefType(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_EnumVarsList(BGBCP_ParseState *ctx, char **str);
//AHSRC:cparse/cparse_def.c
BCCX_Node *BGBCP_VarsList(BGBCP_ParseState *ctx, char **str, BCCX_Node *tn);
BCCX_Node *BGBCP_FunVarsList(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_DefName(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_DefName2(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_VarDefinition(BGBCP_ParseState *ctx,char **str, BCCX_Node *tn);
BCCX_Node *BGBCP_ArgDefinition(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_Definition(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ForceDefinition(BGBCP_ParseState *ctx, char **str);
//AHSRC:cparse/cparse_expr2.c
int BGBCP_AddExpression(char *name,BCCX_Node *(*func)(BGBCP_ParseState *ctx, char **s));
BCCX_Node *BGBCP_ParseExpressionName(BGBCP_ParseState *ctx, char *name, char **s);
BCCX_Node *BGBCP_Number(BGBCP_ParseState *ctx, char *str);
BCCX_Node *BGBCP_ExpressionLit(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ExpressionPostfix(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ExpressionUnary(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ExpressionCast(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_BinaryExpr(char *op, BCCX_Node *l, BCCX_Node *r);
BCCX_Node *BGBCP_UnaryExpr(char *op, BCCX_Node *v);
BCCX_Node *BGBCP_IfExpr(BCCX_Node *cond, BCCX_Node *ln, BCCX_Node *rn);
BCCX_Node *BGBCP_ExpressionExp(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ExpressionMD(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ExpressionAS(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ExpressionSHLR(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ExpressionRCmp(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ExpressionECmp(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ExpressionBitAnd(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ExpressionBitXor(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ExpressionBitOr(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ExpressionLop(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ExpressionLop2(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ExpressionTCond(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ExpressionEquals(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ExpressionComma(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_Expression(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_Expression2(BGBCP_ParseState *ctx, char **str);
//AHSRC:cparse/cparse_reduce.c
int BGBCP_IsUnaryP(BGBCP_ParseState *ctx, BCCX_Node *l, char *op);
int BGBCP_IsBinaryP(BGBCP_ParseState *ctx, BCCX_Node *l, char *op);
int BGBCP_BoolExpr(BGBCP_ParseState *ctx, BCCX_Node *l);
BCCX_Node *BGBCP_WrapIntSuf(s64 i, char *suf);
BCCX_Node *BGBCP_WrapRealSuf(double f, char *suf);
BCCX_Node *BGBCP_WrapInt(s64 i);
BCCX_Node *BGBCP_WrapReal(double f);
int BGBCP_IsIntP(BGBCP_ParseState *ctx, BCCX_Node *l);
int BGBCP_IsRealP(BGBCP_ParseState *ctx, BCCX_Node *l);
int BGBCP_IsCharP(BGBCP_ParseState *ctx, BCCX_Node *l);
BCCX_Node *BGBCP_Boolify(BGBCP_ParseState *ctx, BCCX_Node *l);
char *BGBCP_BinaryTySuf(BGBCP_ParseState *ctx, char *op,BCCX_Node *ln, BCCX_Node *rn);
BCCX_Node *BGBCP_ReduceForm(BGBCP_ParseState *ctx,BCCX_Node *l, int flag);
int BGBCP_SetLine(BGBCP_ParseState *ctx, BCCX_Node *l,char *fn, int ln);
BCCX_Node *BGBCP_ReduceStatementForm(BGBCP_ParseState *ctx,BCCX_Node *l, int flag);
BCCX_Node *BGBCP_ReduceExpr(BGBCP_ParseState *ctx, BCCX_Node *l);
BCCX_Node *BGBCP_ReduceStatement(BGBCP_ParseState *ctx, BCCX_Node *l);
BCCX_Node *BGBCP_ReduceExprConst(BGBCP_ParseState *ctx, BCCX_Node *l);
//AHSRC:cparse/cparse_stmt.c
void BGBCP_Warn(char *se, char *str, ...);
void BGBCP_Error(char *se, char *str, ...);
void BGBCP_ErrorCtx(BGBCP_ParseState *ctx, char *se, char *str, ...);
int BGBCP_AddStatement(char *name,BCCX_Node *(*func)(BGBCP_ParseState *ctx, char **s));
BCCX_Node *BGBCP_ParseStatementName(BGBCP_ParseState *ctx, char *name, char **s);
int BGBCP_AddBlockStatement(char *name,BCCX_Node *(*func)(BGBCP_ParseState *ctx, char **s));
BCCX_Node *BGBCP_ParseBlockStatementName(BGBCP_ParseState *ctx, char *name, char **s);
char *BGBCP_EatSemicolon(char *s);
char *BGBCP_EatSemicolonRequired(BGBCP_ParseState *ctx, char *s);
BCCX_Node *BGBCP_Statement(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ParseComment(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ParseDocComment(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_BlockStatementInner(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_BlockStatement(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_Block(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_BlockStatement2(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_BlockStatement3(BGBCP_ParseState *ctx, char **str);
//AHSRC:cparse/preproc.c
int BGBPP_CheckIncludeHashName(char *str);
int BGBPP_CheckIncludeHashNext(int hash);
int BGBPP_CheckIncludeCache(char *str, byte **rbuf, int *rsz);
int BGBPP_AddIncludeCache(char *str, byte *buf, int sz);
int BGBPP_AddIncludePathFront(char *str);
int BGBPP_AddIncludePathBack(char *str);
char *BGBPP_EmitString(char *t, char *s);
char *BGBPP_EmitCharString(char *t, char *s);
void BGBPP_Trigraphs(BGBCP_ParseState *ctx, char *str);
void BGBPP_UniEscape(BGBCP_ParseState *ctx, char *str);
int BGBPP_Error(BGBCP_ParseState *ctx, char *str, ...);
BGBPP_Def *BGBPP_AllocDefine(BGBCP_ParseState *ctx);
void BGBPP_FreeDefine(BGBCP_ParseState *ctx, BGBPP_Def *def);
BGBPP_Def *BGBPP_LookupDefine(BGBCP_ParseState *ctx, char *name);
void BGBPP_DeleteDefine(BGBCP_ParseState *ctx, char *name);
void BGBPP_CleanupDefines(BGBCP_ParseState *ctx);
void BGBPP_AddDefine(BGBCP_ParseState *ctx, char *name, char *str);
void BGBPP_AddDefineArgs(BGBCP_ParseState *ctx,char *name, char **args, char *str);
void BGBPP_AddStaticDefine(BGBCP_ParseState *ctx,char *name, char *str);
void BGBPP_AddStaticDefineArgs(BGBCP_ParseState *ctx,char *name, char **args, char *str);
void BGBPP_SendDefines(BGBCP_ParseState *ctx);
char *BGBPP_LoadInclude(BGBCP_ParseState *ctx, char *name, int *rsz);
void BGBPP_Include(BGBCP_ParseState *ctx, char *str);
void BGBPP_Directive2(BGBCP_ParseState *ctx, char *str);
void BGBPP_Directive(BGBCP_ParseState *ctx, char *str);
char *BGBPP_ParseArg(BGBCP_ParseState *ctx, char *s, char *b);
char *BGBPP_PrintName(char *t, char *s);
char *BGBPP_PrintToken(char *t, char *s, int ty);
int BGBPP_Expand(BGBCP_ParseState *ctx,char **src, char **dst, char *op, char *dste);
int BGBPP_Line(BGBCP_ParseState *ctx, char *str);
int BGBPP_LineDigraph(BGBCP_ParseState *ctx, char *str);
int BGBPP_LinePostFilter(BGBCP_ParseState *ctx, char *str);
char *BGBPP_ParseLine(BGBCP_ParseState *ctx, char *s, char *b);
int BGBPP_BufferLine(BGBCP_ParseState *ctx, char *b);
int BGBPP_Buffer(BGBCP_ParseState *ctx, char *ibuf);
int BGBPP_Filter(BGBCP_ParseState *ctx, char *ibuf, char *obuf, int osz);
//AHSRC:mm/cc_tokord.c
//AHSRC:mm/ccx_node.c
int BCCX_StringToStridx(char *str);
char *BCCX_StridxToString(int idx);
int BCCX_Init();
BCCX_Node *BCCX_AllocNode(void);
void BCCX_FreeNode(BCCX_Node *n);
int BCCX_LookupAttrVal(BCCX_Node *node, char *var,u16 **rrn, BCCX_AttrVal **rrv);
int BCCX_FetchAttrVal(BCCX_Node *node, char *var,u16 **rrn, BCCX_AttrVal **rrv);
char *BCCX_Get(BCCX_Node *n, char *var);
char *BCCX_Get_SI(BCCX_Node *n, char *var);
char *BCCX_Get_SI(BCCX_Node *n, char *var);
s64 BCCX_GetInt(BCCX_Node *n, char *var);
double BCCX_GetFloat(BCCX_Node *n, char *var);
void BCCX_Set(BCCX_Node *n, char *var, char *val);
void BCCX_SetInt(BCCX_Node *n, char *var, s64 val);
void BCCX_SetFloat(BCCX_Node *n, char *var, double val);
BCCX_Node *BCCX_New(char *tag);
BCCX_Node *BCCX_NewText(char *text);
void BCCX_AddV(BCCX_Node *parent, BCCX_Node *child);
void BCCX_Add(BCCX_Node *parent, BCCX_Node *child);
BCCX_Node *BCCX_AddEnd(BCCX_Node *lst, BCCX_Node *n);
BCCX_Node *BCCX_AddEnd2(BCCX_Node *fst, BCCX_Node **rlst, BCCX_Node *n);
BCCX_Node *BCCX_New1V(char *tag, BCCX_Node *a);
BCCX_Node *BCCX_New1(char *tag, BCCX_Node *a);
BCCX_Node *BCCX_New2(char *tag, BCCX_Node *a, BCCX_Node *b);
BCCX_Node *BCCX_New3(char *tag, BCCX_Node *a,BCCX_Node *b, BCCX_Node *c);
BCCX_Node *BCCX_New4(char *tag, BCCX_Node *a,BCCX_Node *b, BCCX_Node *c, BCCX_Node *d);
int BCCX_NodeP(BCCX_Node *n);
int BCCX_TextP(BCCX_Node *n);
int BCCX_LeafP(BCCX_Node *n);
int BCCX_ChildP(BCCX_Node *n);
BCCX_Node *BCCX_Next(BCCX_Node *n);
BCCX_Node *BCCX_Prev(BCCX_Node *n);
BCCX_Node *BCCX_Parent(BCCX_Node *n);
BCCX_Node *BCCX_Child(BCCX_Node *n);
char *BCCX_Tag(BCCX_Node *n);
void BCCX_SetTag(BCCX_Node *n, char *s);
int BCCX_TagIsP(BCCX_Node *n, char *str);
int BCCX_AttrIsP(BCCX_Node *n, char *var, char *val);
int BCCX_TagAttrIsP(BCCX_Node *n, char *tag, char *var, char *val);
BCCX_Node *BCCX_FindNextTag(BCCX_Node *last, char *tag);
BCCX_Node *BCCX_FindNextAttr(BCCX_Node *last, char *var, char *val);
BCCX_Node *BCCX_FindNextTagAttr(BCCX_Node *last,char *tag, char *var, char *val);
BCCX_Node *BCCX_FindTag(BCCX_Node *parent, char *tag);
BCCX_Node *BCCX_FindAttr(BCCX_Node *parent, char *var, char *val);
BCCX_Node *BCCX_FindTagAttr(BCCX_Node *parent,char *tag, char *var, char *val);
BCCX_Node *BCCX_Fetch(BCCX_Node *parent, char *tag);
BCCX_Node *BCCX_Clone(BCCX_Node *n);
BCCX_Node *BCCX_CloneList(BCCX_Node *n);
void BCCX_Unlink(BCCX_Node *n);
void BCCX_DeleteTree(BCCX_Node *n);
void BCCX_CheckDeleteUnlinked(BCCX_Node *n);
//AHSRC:mm/ccx_print.c
char *BCCX_PrintText(char *s, char *t);
int BCCX_SizeNodeAttr(BCCX_Node *node);
char *BCCX_PrintBufNodeAttr(BCCX_Node *node, char *buf);
void BCCX_PrintBufSpecial(BCCX_Node *node, int ind,void (*pb)(void *p, char *b), void *ob);
void BCCX_PrintBufNodeAttrNode(BCCX_Node *node, int ind,void (*pb)(void *p, char *b), void *ob);
int BCCX_CheckNodeAttrNode(BCCX_Node *node);
void BCCX_PrintBuf(BCCX_Node *node, int ind,void (*pb)(void *p, char *b), void *ob);
void BCCX_DumpFD(FILE *fd, BCCX_Node *node);
void BCCX_PrintFD(FILE *fd, BCCX_Node *node);
char *BCCX_DumpStr(char *buf, BCCX_Node *node);
char *BCCX_PrintStr(char *buf, BCCX_Node *node);
void BCCX_Print(BCCX_Node *node);
//AHSRC:mm/ccx_parse.c
BCCX_ReadStream BCCX_NewReadStreamBuf(char *buf);
BCCX_ReadPos BCCX_GetPos(BCCX_ReadStream strm);
void BCCX_SetPos(BCCX_ReadStream strm, BCCX_ReadPos pos);
int BCCX_PeekChar(BCCX_ReadStream strm);
int BCCX_ReadChar(BCCX_ReadStream strm);
int BCCX_PeekCharIdx(BCCX_ReadStream strm, int idx);
int BCCX_ParseEatWhite(BCCX_ReadStream strm);
int BCCX_ParseSpecialP(BCCX_ReadStream strm);
int BCCX_ParseContSpecialP(BCCX_ReadStream strm);
char *BCCX_ParseToken(BCCX_ReadStream strm, int *ty);
char *BCCX_PeekToken(BCCX_ReadStream strm, int *ty);
char *BCCX_ParseText(BCCX_ReadStream strm);
int BCCX_ParseAttr(BCCX_ReadStream strm, BCCX_Node *node);
BCCX_Node *BCCX_ParseTag(BCCX_ReadStream strm, int *rgrp);
BCCX_Node *BCCX_ParseExprR(BCCX_ReadStream strm, int *rgrp);
BCCX_Node *BCCX_ParseExpr(BCCX_ReadStream strm);
BCCX_Node *BCCX_ParseExprStr(char *str);
//AHSRC:mm/cc_float16.c
u32 BGBCC_Float16_ConvertMantissa(u32 i);
BGBCC_API int BGBCC_Float16_Init();
BGBCC_API double BGBCC_DecodeFloat16(u16 val);
BGBCC_API u16 BGBCC_EncodeFloat16(double val);
BGBCC_API double BGBCC_DecodeFloat16F(u16 val);
BGBCC_API double BGBCC_DecodeFloat12(u16 val);
BGBCC_API u16 BGBCC_EncodeFloat12(double val);
BGBCC_API u16 BGBCC_NegFloat16(u16 x);
BGBCC_API u16 BGBCC_RcpFloat16(u16 x);
BGBCC_API u16 BGBCC_SqrtFloat16(u16 x);
BGBCC_API u16 BGBCC_AddFloat16(u16 x, u16 y);
BGBCC_API u16 BGBCC_AddFloat16F(u16 x, u16 y);
BGBCC_API u16 BGBCC_AddFloat16F(u16 x, u16 y);
BGBCC_API u16 BGBCC_SubFloat16(u16 x, u16 y);
BGBCC_API u16 BGBCC_MulFloat16(u16 x, u16 y);
BGBCC_API u16 BGBCC_MulFloat16F(u16 x, u16 y);
BGBCC_API u32 BGBCC_MulFloat16F2P(u32 x, u32 y);
BGBCC_API u64 BGBCC_MulFloat16F4P(u64 x, u64 y);
BGBCC_API u16 BGBCC_DivFloat16(u16 x, u16 y);
//AHSRC:mm/cc_malloc.c
void BGBCC_DieError();
void BGBCC_DieFatal();
void BGBCC_CleanupAll();
void *bgbcc_tmalloc(char *ty, int sz);
void *bgbcc_stralloc(int sz);
void *bgbcc_malloc(int sz);
void *bgbcc_tmalloc2(char *ty, int sz);
void *bgbcc_malloc2(int sz);
void bgbcc_free(void *p);
void *bgbcc_realloc(void *ptr, int sz);
int bgbcc_malloc_lookupblock(void *obj);
int bgbcc_stralloc_lookupblock(void *obj);
void *bgbcc_malloc_getbase(void *obj);
char *bgbcc_malloc_gettype(void *obj);
char *bgbcc_strdup(char *str);
int bgbcc_strdup_i(char *str, char suf);
char *bgbcc_strtab_i(int i);
char *bgbcc_strdup(char *str);
char *bgbcc_strdup2(char *str, char suf);
int bgbcc_strdup_lookup(char *str, char suf);
bool bgbcc_strdup_checkp(char *str, char suf);
bool bgbcc_strdup_strp(char *str);
bool bgbcc_strdup_symp(char *str);
bool bgbcc_strdup_keyp(char *str);
char *bgbcc_strdup_symbol(char *str);
char *bgbcc_strdup_keyword(char *str);
void *bgbcc_ralloc(int sz);
char *bgbcc_rstrdup(char *s);
char **bgbcc_split(char *s);
char *bgbcc_rstradd(char *s0, char *s1);
char *bgbcc_rstradd2(char *s0, char *s1, char *s2);
char *bgbcc_rstradd3(char *s0, char *s1, char *s2, char *s3);
void *bgbcc_neword(char **tab);
int bgbcc_strord(char *str, void *tab);
int BGBCC_GetOrdinal(char *str);
int BGBCC_CheckOrdinalFlag(int i, int ty);
int BGBCC_GetOrdinalLang(char *str, int lang);
int BGBCC_GetOrdinalLangType(char *str, int lang, int ty);
double BGBCC_ParseNumber(char *str);
char *BGBCC_GenSym();
char *BGBCC_GenSym2();
int bgbcc_strcmp(char *s1, char *s2);
int bgbcc_stricmp(char *s1, char *s2);
//AHSRC:ccxl/ccxl_cgif.c
ccxl_status BGBCC_CCXL_RegisterBackend(BGBCC_CCXL_BackendFuncs_vt *ivt);
ccxl_status BGBCC_CCXL_StackFn(BGBCC_TransState *ctx, char *name);
ccxl_status BGBCC_CCXL_StackLn(BGBCC_TransState *ctx, int line);
ccxl_status BGBCC_CCXL_EmitLabel(BGBCC_TransState *ctx, ccxl_label lbl);
ccxl_status BGBCC_CCXL_EmitJump(BGBCC_TransState *ctx, ccxl_label lbl);
ccxl_status BGBCC_CCXL_EmitJumpRegZero(BGBCC_TransState *ctx,ccxl_type type, int cmpop, ccxl_register reg, ccxl_label lbl);
ccxl_status BGBCC_CCXL_EmitJumpRegCmp(BGBCC_TransState *ctx,ccxl_type type, int cmpop, ccxl_register sreg, ccxl_register treg, ccxl_label lbl);
ccxl_status BGBCC_CCXL_EmitMov(BGBCC_TransState *ctx,ccxl_type type, ccxl_register dreg, ccxl_register sreg);
ccxl_status BGBCC_CCXL_EmitCallOp(BGBCC_TransState *ctx,ccxl_type type, ccxl_register dst, ccxl_register src, int na);
ccxl_status BGBCC_CCXL_EmitCallCsrvOp(BGBCC_TransState *ctx,ccxl_type type, ccxl_register dst, ccxl_register src);
ccxl_status BGBCC_CCXL_EmitCallArg(BGBCC_TransState *ctx,ccxl_register reg);
ccxl_status BGBCC_CCXL_EmitCallRetDefault(BGBCC_TransState *ctx);
ccxl_status BGBCC_CCXL_EmitCallRetV(BGBCC_TransState *ctx);
ccxl_status BGBCC_CCXL_EmitCallRetOp(BGBCC_TransState *ctx,ccxl_type type, ccxl_register src);
ccxl_status BGBCC_CCXL_EmitConv(BGBCC_TransState *ctx,ccxl_type dtype, ccxl_type stype, ccxl_register dst, ccxl_register src);
ccxl_status BGBCC_CCXL_EmitUnaryOp(BGBCC_TransState *ctx,ccxl_type type, int opr, ccxl_register dst, ccxl_register src);
ccxl_status BGBCC_CCXL_EmitBinaryOp(BGBCC_TransState *ctx,ccxl_type type, int opr, ccxl_register dst, ccxl_register srca, ccxl_register srcb);
ccxl_status BGBCC_CCXL_EmitCompareOp(BGBCC_TransState *ctx,ccxl_type type, int opr, ccxl_register dst, ccxl_register srca, ccxl_register srcb);
ccxl_status BGBCC_CCXL_EmitLoadIndexImm(BGBCC_TransState *ctx,ccxl_type type, ccxl_register dst, ccxl_register src, int idx);
ccxl_status BGBCC_CCXL_EmitStoreIndexImm(BGBCC_TransState *ctx,ccxl_type type, ccxl_register dst, ccxl_register src, int idx);
ccxl_status BGBCC_CCXL_EmitLoadIndex(BGBCC_TransState *ctx,ccxl_type type, ccxl_register dst, ccxl_register srca, ccxl_register srcb);
ccxl_status BGBCC_CCXL_EmitStoreIndex(BGBCC_TransState *ctx,ccxl_type type, ccxl_register dst, ccxl_register srca, ccxl_register srcb);
ccxl_status BGBCC_CCXL_EmitLeaImm(BGBCC_TransState *ctx,ccxl_type type, ccxl_register dst, ccxl_register src, int idx);
ccxl_status BGBCC_CCXL_EmitLea(BGBCC_TransState *ctx,ccxl_type type, ccxl_register dst, ccxl_register srca, ccxl_register srcb);
ccxl_status BGBCC_CCXL_EmitLdaVar(BGBCC_TransState *ctx,ccxl_type type, ccxl_register dst, ccxl_register src);
ccxl_status BGBCC_CCXL_EmitSizeofVar(BGBCC_TransState *ctx,ccxl_type type, ccxl_register dst);
ccxl_status BGBCC_CCXL_EmitDiffPtr(BGBCC_TransState *ctx,ccxl_type type, ccxl_register dst, ccxl_register srca, ccxl_register srcb);
ccxl_status BGBCC_CCXL_EmitOffsetOf(BGBCC_TransState *ctx,ccxl_type type, ccxl_register dst, BGBCC_CCXL_LiteralInfo *st, char *name);
ccxl_status BGBCC_CCXL_EmitLoadSlot(BGBCC_TransState *ctx,ccxl_type type, ccxl_register dst, ccxl_register src, BGBCC_CCXL_LiteralInfo *st, char *name);
ccxl_status BGBCC_CCXL_EmitStoreSlot(BGBCC_TransState *ctx,ccxl_type type, ccxl_register dst, ccxl_register src, BGBCC_CCXL_LiteralInfo *st, char *name);
ccxl_status BGBCC_CCXL_EmitLoadSlotAddr(BGBCC_TransState *ctx,ccxl_type type, ccxl_register dst, ccxl_register src, BGBCC_CCXL_LiteralInfo *st, char *name);
ccxl_status BGBCC_CCXL_EmitLoadSlotAddrID(BGBCC_TransState *ctx,ccxl_type type, ccxl_register dst, ccxl_register src, BGBCC_CCXL_LiteralInfo *st, int fn);
ccxl_status BGBCC_CCXL_EmitInitObj(BGBCC_TransState *ctx,ccxl_type type, ccxl_register dst, BGBCC_CCXL_LiteralInfo *st);
ccxl_status BGBCC_CCXL_EmitDropObj(BGBCC_TransState *ctx,ccxl_type type, ccxl_register dst, BGBCC_CCXL_LiteralInfo *st);
ccxl_status BGBCC_CCXL_EmitInitArr(BGBCC_TransState *ctx,ccxl_type type, ccxl_register dst, int sz);
ccxl_status BGBCC_CCXL_EmitInitObjArr(BGBCC_TransState *ctx,ccxl_type type, ccxl_register dst, BGBCC_CCXL_LiteralInfo *st, int sz);
ccxl_status BGBCC_CCXL_EmitLoadInitArr(BGBCC_TransState *ctx,ccxl_type type, ccxl_register dst, ccxl_register val, int sz);
ccxl_status BGBCC_CCXL_EmitLoadInitObjArr(BGBCC_TransState *ctx,ccxl_type type, ccxl_register dst, BGBCC_CCXL_LiteralInfo *st, ccxl_register val, int sz);
ccxl_status BGBCC_CCXL_FlattenImage(BGBCC_TransState *ctx,byte *obuf, int *rosz, fourcc imgfmt);
ccxl_status BGBCC_CCXL_SetupContextForArch(BGBCC_TransState *ctx);
ccxl_status BGBCC_CCXL_SetupParserForArch(BGBCP_ParseState *ctx);
ccxl_status BGBCC_CCXL_InitTargets(void);
//AHSRC:ccxl/ccxl_compile.c
void BGBCC_CCXL_Warn(BGBCC_TransState *ctx, char *str, ...);
void BGBCC_CCXL_Error(BGBCC_TransState *ctx, char *str, ...);
void BGBCC_CCXL_Note(BGBCC_TransState *ctx, char *str, ...);
void BGBCC_CCXL_StubWarnLLn(BGBCC_TransState *ctx,char *file, int line);
void BGBCC_CCXL_StubErrorLLn(BGBCC_TransState *ctx,char *file, int line);
void BGBCC_CCXL_TagErrorLLn(BGBCC_TransState *ctx, int tag,char *file, int line);
ccxl_label BGBCC_CCXL_GenSym(BGBCC_TransState *ctx);
ccxl_label BGBCC_CCXL_GenSym2(BGBCC_TransState *ctx);
int BGBCC_CCXL_CompileSwitch(BGBCC_TransState *ctx, BCCX_Node *l);
void BGBCC_CCXL_CompileInitVar(BGBCC_TransState *ctx,char *name, BCCX_Node *type, BCCX_Node *value);
void BGBCC_CCXL_CompileStatement(BGBCC_TransState *ctx, BCCX_Node *l);
char *BGBCC_CCXL_VarTypeString_FlattenExpr(BGBCC_TransState *ctx,char *dst, BCCX_Node *l, int fl);
char *BGBCC_CCXL_VarTypeString_FlattenName(BGBCC_TransState *ctx,char *t, char *s, int fl);
int BGBCC_CCXL_VarTypeString_ModifierChar(BGBCC_TransState *ctx, int i);
char *BGBCC_CCXL_VarTypeString_FlattenModifiers(BGBCC_TransState *ctx,char *t, int fl);
char *BGBCC_CCXL_VarTypeString_FlattenModifiers2(BGBCC_TransState *ctx,char *t, int fl);
char *BGBCC_CCXL_VarTypeString(BGBCC_TransState *ctx, BCCX_Node *ty);
char *BGBCC_CCXL_VarImageTypeString(BGBCC_TransState *ctx, BCCX_Node *ty);
char *BGBCC_CCXL_VarTypeFlagsString(BGBCC_TransState *ctx, BCCX_Node *ty);
void BGBCC_CCXL_EmitVarFunc(BGBCC_TransState *ctx,char *name, BCCX_Node *ty, BCCX_Node *args);
void BGBCC_CCXL_EmitVar(BGBCC_TransState *ctx,char *name, BCCX_Node *ty, BCCX_Node *v);
void BGBCC_CCXL_EmitVar2(BGBCC_TransState *ctx,char *name, BCCX_Node *ty, BCCX_Node *v);
void BGBCC_CCXL_EmitVar3(BGBCC_TransState *ctx, char *name, char *ty);
void BGBCC_CCXL_EmitVarProperty(BGBCC_TransState *ctx, BCCX_Node *l);
void BGBCC_CCXL_CompileVarProperty(BGBCC_TransState *ctx, BCCX_Node *l);
int BGBCC_CCXL_CompileVarDummyP(BGBCC_TransState *ctx, BCCX_Node *l);
void BGBCC_CCXL_CompileVarStatementBlock(BGBCC_TransState *ctx, BCCX_Node *l);
int BGBCC_CCXL_CompileVarStatementCompound(BGBCC_TransState *ctx, BCCX_Node *l);
void BGBCC_CCXL_CompileVarStatement(BGBCC_TransState *ctx, BCCX_Node *l);
void BGBCC_CCXL_CompileVarStatement2(BGBCC_TransState *ctx, BCCX_Node *l);
BCCX_Node *BGBCC_CCXL_CompileBlock(BGBCC_TransState *ctx,BCCX_Node *type, char *name, BCCX_Node *args, BCCX_Node *body);
char *BGBCC_CCXL_GenProtoSig(BGBCC_TransState *ctx,BCCX_Node *type, BCCX_Node *args);
void BGBCC_CCXL_EmitSigProto(BGBCC_TransState *ctx,BCCX_Node *type, char *name, BCCX_Node *args);
char *BGBCC_CCXL_VarSigProto(BGBCC_TransState *ctx,BCCX_Node *type, char *name, BCCX_Node *args);
BCCX_Node *BGBCC_CCXL_CompileProto(BGBCC_TransState *ctx,BCCX_Node *type, char *name, BCCX_Node *args);
void BGBCC_CCXL_CompileStruct(BGBCC_TransState *ctx, BCCX_Node *l);
void BGBCC_CCXL_CompileUnion(BGBCC_TransState *ctx, BCCX_Node *l);
void BGBCC_CCXL_CompileClass(BGBCC_TransState *ctx, BCCX_Node *l);
void BGBCC_CCXL_CompileEnum(BGBCC_TransState *ctx, BCCX_Node *l);
BCCX_Node *BGBCC_CCXL_CompileSProto(BGBCC_TransState *ctx, BCCX_Node *l);
BCCX_Node *BGBCC_CCXL_GetNodeAttribute(BGBCC_TransState *ctx,BCCX_Node *l, char *name);
char *BGBCC_CCXL_GetNodeAttributeString(BGBCC_TransState *ctx,BCCX_Node *l, char *name);
void BGBCC_CCXL_CompileTypedef(BGBCC_TransState *ctx, BCCX_Node *l);
void BGBCC_CCXL_CompileStructs(BGBCC_TransState *ctx);
void BGBCC_CCXL_EmitVarValue(BGBCC_TransState *ctx, BCCX_Node *v);
void BGBCC_CCXL_EmitVarValueR(BGBCC_TransState *ctx, BCCX_Node *v);
void BGBCC_CCXL_EmitVarValueR2(BGBCC_TransState *ctx, BCCX_Node *v);
char *BGBCC_CCXL_QualifyNameNS(BGBCC_TransState *ctx, char *name);
void BGBCC_CCXL_EmitTopVar(BGBCC_TransState *ctx,char *name, BCCX_Node *ty, BCCX_Node *v);
void BGBCC_CCXL_CompileTopStatement(BGBCC_TransState *ctx, BCCX_Node *l);
int BGBCC_CCXL_CompileModuleCTX(BGBCC_TransState *ctx, char *name, BCCX_Node *l);
char *BGBCC_CCXL_CompileModule(char *name, BCCX_Node *l);
//AHSRC:ccxl/ccxl_const.c
int BGBCC_CCXL_CheckExpandLvt4(BGBCC_TransState *ctx);
int BGBCC_CCXL_CheckExpandLvt8(BGBCC_TransState *ctx);
int BGBCC_CCXL_IndexLitU32(BGBCC_TransState *ctx, u32 val);
int BGBCC_CCXL_IndexLitU64(BGBCC_TransState *ctx, u64 val);
int BGBCC_CCXL_IndexLitS32(BGBCC_TransState *ctx, s32 val);
int BGBCC_CCXL_IndexLitF32(BGBCC_TransState *ctx, float val);
int BGBCC_CCXL_IndexLitS64(BGBCC_TransState *ctx, s64 val);
int BGBCC_CCXL_IndexLitF64(BGBCC_TransState *ctx, double val);
int BGBCC_CCXL_LookupString(BGBCC_TransState *ctx, char *str);
int BGBCC_CCXL_LookupWString(BGBCC_TransState *ctx, char *str);
int BGBCC_CCXL_IndexString(BGBCC_TransState *ctx, char *str);
int BGBCC_CCXL_IndexWString(BGBCC_TransState *ctx, char *str);
int BGBCC_CCXL_IndexCountString(BGBCC_TransState *ctx, char *str);
int BGBCC_CCXL_FlattenCountStrings(BGBCC_TransState *ctx);
BGBCC_CCXL_LiteralInfo *BGBCC_CCXL_LookupStruct(BGBCC_TransState *ctx, char *str);
BGBCC_CCXL_LiteralInfo *BGBCC_CCXL_LookupUnion(BGBCC_TransState *ctx, char *str);
BGBCC_CCXL_LiteralInfo *BGBCC_CCXL_LookupStructure(BGBCC_TransState *ctx, char *str);
int BGBCC_CCXL_LookupStructureID(BGBCC_TransState *ctx, char *str);
void BGBCC_CCXL_CheckExpandLiterals(BGBCC_TransState *ctx);
BGBCC_CCXL_LiteralInfo *BGBCC_CCXL_GetStruct(BGBCC_TransState *ctx, char *str);
BGBCC_CCXL_LiteralInfo *BGBCC_CCXL_GetUnion(BGBCC_TransState *ctx, char *str);
int BGBCC_CCXL_GetStructID(BGBCC_TransState *ctx, char *str);
int BGBCC_CCXL_GetUnionID(BGBCC_TransState *ctx, char *str);
BGBCC_CCXL_LiteralInfo *BGBCC_CCXL_LookupTypedef(BGBCC_TransState *ctx, char *name, char *sig);
BGBCC_CCXL_LiteralInfo *BGBCC_CCXL_GetTypedef(BGBCC_TransState *ctx, char *name, char *sig);
//AHSRC:ccxl/ccxl_expr.c
char *BGBCC_CCXL_CIfy(char *s);
void BGBCC_CCXL_CompileAssign(BGBCC_TransState *ctx, BCCX_Node *l);
void BGBCC_CCXL_CompileExprList(BGBCC_TransState *ctx, BCCX_Node *lst);
void BGBCC_CCXL_CompileExprListReverse(BGBCC_TransState *ctx, BCCX_Node *lst);
void BGBCC_CCXL_CompileArgsList(BGBCC_TransState *ctx, BCCX_Node *lst);
void BGBCC_CCXL_CompileFuncall(BGBCC_TransState *ctx, BCCX_Node *l);
void BGBCC_CCXL_CompileMethodcall(BGBCC_TransState *ctx, BCCX_Node *l);
void BGBCC_CCXL_CompileFormJmpTF(BGBCC_TransState *ctx, BCCX_Node *l,ccxl_label brt, ccxl_label brf);
void BGBCC_CCXL_CompileForm(BGBCC_TransState *ctx, BCCX_Node *l);
void BGBCC_CCXL_CompileExprT(BGBCC_TransState *ctx, BCCX_Node *l);
void BGBCC_CCXL_CompileExpr(BGBCC_TransState *ctx, BCCX_Node *l);
void BGBCC_CCXL_CompileExprTail(BGBCC_TransState *ctx, BCCX_Node *l);
void BGBCC_CCXL_CompileExprAsType(BGBCC_TransState *ctx,BCCX_Node *ty, BCCX_Node *l);
//AHSRC:ccxl/ccxl_global.c
void BGBCC_CCXL_CheckExpandGlobals(BGBCC_TransState *ctx);
int BGBCC_CCXL_HashName(char *name);
BGBCC_CCXL_RegisterInfo *BGBCC_CCXL_LookupGlobal(BGBCC_TransState *ctx, char *name);
BGBCC_CCXL_RegisterInfo *BGBCC_CCXL_GetGlobal(BGBCC_TransState *ctx, char *name);
void BGBCC_CCXL_AddGlobalDecl(BGBCC_TransState *ctx,BGBCC_CCXL_RegisterInfo *decl);
void BGBCC_CCXL_AddFrameArg(BGBCC_TransState *ctx,BGBCC_CCXL_RegisterInfo *frame, BGBCC_CCXL_RegisterInfo *decl);
void BGBCC_CCXL_AddFrameLocal(BGBCC_TransState *ctx,BGBCC_CCXL_RegisterInfo *frame, BGBCC_CCXL_RegisterInfo *decl);
void BGBCC_CCXL_AddFrameField(BGBCC_TransState *ctx,BGBCC_CCXL_RegisterInfo *frame, BGBCC_CCXL_RegisterInfo *decl);
BGBCC_CCXL_LiteralInfo *BGBCC_CCXL_AllocLiteral(BGBCC_TransState *ctx);
void BGBCC_CCXL_CheckFreeLiteral(BGBCC_TransState *ctx,BGBCC_CCXL_LiteralInfo *obj);
void BGBCC_CCXL_AddLiteral(BGBCC_TransState *ctx,BGBCC_CCXL_LiteralInfo *obj);
char *BGBCC_CCXL_GetParentLiteralSig(BGBCC_TransState *ctx, BGBCC_CCXL_LiteralInfo *obj);
char *BGBCC_CCXL_GetParentLiteralSigDeref(BGBCC_TransState *ctx, BGBCC_CCXL_LiteralInfo *obj);
char *BGBCC_CCXL_GetObjQNameR_I(BGBCC_TransState *ctx, BGBCC_CCXL_LiteralInfo *obj, char *vt);
char *BGBCC_CCXL_GetObjQName(BGBCC_TransState *ctx, BGBCC_CCXL_LiteralInfo *obj);
void BGBCC_CCXL_Begin(BGBCC_TransState *ctx, int tag);
int BGBCC_CCXL_CheckDefinedContextName(BGBCC_TransState *ctx, int tag, char *name);
void BGBCC_CCXL_BeginName(BGBCC_TransState *ctx, int tag, char *name);
void BGBCC_CCXL_EndFunction(BGBCC_TransState *ctx,BGBCC_CCXL_LiteralInfo *obj);
void BGBCC_CCXL_End(BGBCC_TransState *ctx);
void BGBCC_CCXL_AttribStr(BGBCC_TransState *ctx, int attr, char *str);
void BGBCC_CCXL_AttribInt(BGBCC_TransState *ctx, int attr, int val);
void BGBCC_CCXL_AttribLong(BGBCC_TransState *ctx, int attr, s64 val);
void BGBCC_CCXL_Marker(BGBCC_TransState *ctx, int tag);
void BGBCC_CCXL_ListAddLiteral(BGBCC_TransState *ctx, BGBCC_CCXL_LiteralInfo *list, ccxl_register val);
void BGBCC_CCXL_LiteralInt(BGBCC_TransState *ctx, int attr, s32 val);
void BGBCC_CCXL_LiteralLong(BGBCC_TransState *ctx, int attr, s64 val);
void BGBCC_CCXL_LiteralFloat(BGBCC_TransState *ctx, int attr, double val);
void BGBCC_CCXL_LiteralDouble(BGBCC_TransState *ctx, int attr, double val);
void BGBCC_CCXL_LiteralStr(BGBCC_TransState *ctx, int attr, char *str);
void BGBCC_CCXL_LiteralWStr(BGBCC_TransState *ctx, int attr, char *str);
void BGBCC_CCXL_LiteralGlobalAddr(BGBCC_TransState *ctx,int attr, s32 gblid);
//AHSRC:ccxl/ccxl_index.c
ccxl_label BGBCC_CCXL_LabelFromName(BGBCC_TransState *ctx, char *name);
void BGBCC_CCXL_CompileBreak(BGBCC_TransState *ctx);
void BGBCC_CCXL_CompileContinue(BGBCC_TransState *ctx);
void BGBCC_CCXL_CompileBreakFalse(BGBCC_TransState *ctx);
void BGBCC_CCXL_CompileBreakTrue(BGBCC_TransState *ctx);
void BGBCC_CCXL_CompileContinueFalse(BGBCC_TransState *ctx);
void BGBCC_CCXL_CompileContinueTrue(BGBCC_TransState *ctx);
void BGBCC_CCXL_CompileJmp(BGBCC_TransState *ctx, ccxl_label lbl);
void BGBCC_CCXL_CompileJmpFalse(BGBCC_TransState *ctx, ccxl_label lbl);
void BGBCC_CCXL_CompileJmpTrue(BGBCC_TransState *ctx, ccxl_label lbl);
void BGBCC_CCXL_CompileJmpCond(BGBCC_TransState *ctx,char *op, ccxl_label lbl);
void BGBCC_CCXL_CompileJCO(BGBCC_TransState *ctx, char *op,BCCX_Node *ln, BCCX_Node *rn, ccxl_label lbl);
void BGBCC_CCXL_CompileJCT(BGBCC_TransState *ctx,BCCX_Node *l, ccxl_label lbl);
void BGBCC_CCXL_CompileJCF(BGBCC_TransState *ctx, BCCX_Node *l, ccxl_label lbl);
int BGBCC_CCXL_TryGetSizeofType(BGBCC_TransState *ctx, BCCX_Node *ty);
int BGBCC_CCXL_GetMinMaxSizeofType(BGBCC_TransState *ctx, BCCX_Node *ty,int *rmsz, int *rnsz, int *rmal, int *rnal);
int BGBCC_CCXL_TryGetSizeofName(BGBCC_TransState *ctx, char *name);
int BGBCC_CCXL_GetMinMaxSizeofName(BGBCC_TransState *ctx, char *name,int *rmsz, int *rnsz, int *rmal, int *rnal);
int BGBCC_CCXL_GetMinMaxSizeofDerefName(BGBCC_TransState *ctx, char *name,int *rmsz, int *rnsz, int *rmal, int *rnal);
//AHSRC:ccxl/ccxl_pred.c
bool BGBCC_CCXL_IsRegBasicP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegArgBasicP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegLocalBasicP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegBaseP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegBaseExtP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegRegExtP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegArgExtP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegLocalExtP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegLocalP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegTempP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegArgP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegGlobalP(BGBCC_TransState *ctx, ccxl_register reg);
int BGBCC_CCXL_GetRegID(BGBCC_TransState *ctx, ccxl_register reg);
ccxl_type BGBCC_CCXL_MakeTypeID(BGBCC_TransState *ctx, int id);
ccxl_type BGBCC_CCXL_GetRegType(BGBCC_TransState *ctx, ccxl_register reg);
ccxl_type BGBCC_CCXL_GetRegDerefType(BGBCC_TransState *ctx, ccxl_register reg);
ccxl_type BGBCC_CCXL_GetRegReturnType(BGBCC_TransState *ctx, ccxl_register reg);
ccxl_type BGBCC_CCXL_GetRegPointerToType(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegIntP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegLongP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegFloatP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegDoubleP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegPointerP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegSmallIntP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegImmIntP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegImmLongP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegImmFloatP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegImmDoubleP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegImmStringP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegImmWStringP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegImmLiteralP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegImmGlobalAddrP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegImmInt12P(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegImm12P(BGBCC_TransState *ctx, ccxl_register reg, ccxl_type type);
bool BGBCC_CCXL_IsRegImm32P(BGBCC_TransState *ctx, ccxl_register reg, ccxl_type type);
bool BGBCC_CCXL_IsRegImmIntLit12P(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegImmInt16P(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegImmInt24P(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegImmInt32P(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegImmP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegImmZeroP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegImmILP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegImmILFDP(BGBCC_TransState *ctx, ccxl_register reg);
int BGBCC_CCXL_GetRegImmLit12(BGBCC_TransState *ctx, ccxl_register reg, ccxl_type type);
int BGBCC_CCXL_GetRegImmLit12(BGBCC_TransState *ctx, ccxl_register reg, ccxl_type type);
int BGBCC_CCXL_GetRegImmLit16(BGBCC_TransState *ctx, ccxl_register reg, ccxl_type type);
int BGBCC_CCXL_GetRegImmLit24(BGBCC_TransState *ctx, ccxl_register reg, ccxl_type type);
int BGBCC_CCXL_GetRegImmLitIndex(BGBCC_TransState *ctx, ccxl_register reg, ccxl_type type);
int BGBCC_CCXL_GetRegImmIntValue(BGBCC_TransState *ctx, ccxl_register reg);
s64 BGBCC_CCXL_GetRegImmLongValue(BGBCC_TransState *ctx, ccxl_register reg);
double BGBCC_CCXL_GetRegImmFloatValue(BGBCC_TransState *ctx, ccxl_register reg);
double BGBCC_CCXL_GetRegImmDoubleValue(BGBCC_TransState *ctx, ccxl_register reg);
int BGBCC_CCXL_GetRegImm12Value(BGBCC_TransState *ctx, ccxl_register reg, ccxl_type type);
int BGBCC_CCXL_GetRegImm32Value(BGBCC_TransState *ctx, ccxl_register reg, ccxl_type type);
ccxl_status BGBCC_CCXL_GetRegForIntValue(BGBCC_TransState *ctx, ccxl_register *rreg, s32 val);
ccxl_status BGBCC_CCXL_GetRegForLongValue(BGBCC_TransState *ctx, ccxl_register *rreg, s64 val);
ccxl_status BGBCC_CCXL_GetRegForFloatValue(BGBCC_TransState *ctx, ccxl_register *rreg, f32 val);
ccxl_status BGBCC_CCXL_GetRegForDoubleValue(BGBCC_TransState *ctx, ccxl_register *rreg, f64 val);
ccxl_status BGBCC_CCXL_GetRegForStringValue(BGBCC_TransState *ctx, ccxl_register *rreg, char *str);
ccxl_status BGBCC_CCXL_GetRegForWStringValue(BGBCC_TransState *ctx, ccxl_register *rreg, char *str);
ccxl_status BGBCC_CCXL_GetRegForLiteralValue(BGBCC_TransState *ctx, ccxl_register *rreg, s32 val);
ccxl_status BGBCC_CCXL_GetRegForGlobalAddrValue(BGBCC_TransState *ctx, ccxl_register *rreg, s32 val);
int BGBCC_CCXL_GetTypeOperationZ(BGBCC_TransState *ctx, ccxl_type ty);
int BGBCC_CCXL_GetTypeOperationExtZ(BGBCC_TransState *ctx, ccxl_type ty);
int BGBCC_CCXL_GetTypeOperationBaseZ(BGBCC_TransState *ctx, ccxl_type ty);
//AHSRC:ccxl/ccxl_reduce.c
int BGBCC_CCXL_IsUnaryP(BGBCC_TransState *ctx, BCCX_Node *l, char *op);
int BGBCC_CCXL_IsBinaryP(BGBCC_TransState *ctx, BCCX_Node *l, char *op);
int BGBCC_CCXL_BoolExpr(BGBCC_TransState *ctx, BCCX_Node *l);
BCCX_Node *BGBCC_CCXL_WrapIntSuf(s64 i, char *suf);
BCCX_Node *BGBCC_CCXL_WrapRealSuf(double f, char *suf);
BCCX_Node *BGBCC_CCXL_WrapInt(s64 i);
BCCX_Node *BGBCC_CCXL_WrapReal(double f);
int BGBCC_CCXL_IsIntP(BGBCC_TransState *ctx, BCCX_Node *l);
int BGBCC_CCXL_IsRealP(BGBCC_TransState *ctx, BCCX_Node *l);
int BGBCC_CCXL_IsCharP(BGBCC_TransState *ctx, BCCX_Node *l);
BCCX_Node *BGBCC_CCXL_Boolify(BGBCC_TransState *ctx, BCCX_Node *l);
char *BGBCC_CCXL_BinaryTySuf(BGBCC_TransState *ctx, char *op,BCCX_Node *ln, BCCX_Node *rn);
BCCX_Node *BGBCC_CCXL_ReduceForm(BGBCC_TransState *ctx,BCCX_Node *l, int flag);
int BGBCC_CCXL_SetLine(BGBCC_TransState *ctx, BCCX_Node *l,char *fn, int ln);
BCCX_Node *BGBCC_CCXL_ReduceStatementForm(BGBCC_TransState *ctx,BCCX_Node *l, int flag);
BCCX_Node *BGBCC_CCXL_ReduceExpr(BGBCC_TransState *ctx, BCCX_Node *l);
BCCX_Node *BGBCC_CCXL_ReduceStatement(BGBCC_TransState *ctx, BCCX_Node *l);
BCCX_Node *BGBCC_CCXL_ReduceExprConst(BGBCC_TransState *ctx, BCCX_Node *l);
//AHSRC:ccxl/ccxl_register.c
BGBCC_CCXL_RegisterInfo *BGBCC_CCXL_AllocRegisterInfo(BGBCC_TransState *ctx);
bool BGBCC_CCXL_FreeRegisterInfo(BGBCC_TransState *ctx,BGBCC_CCXL_RegisterInfo *rinf);
ccxl_status BGBCC_CCXL_RegisterAllocTemporary(BGBCC_TransState *ctx, ccxl_type bty, ccxl_register *rtreg);
ccxl_status BGBCC_CCXL_RegisterAllocTemporaryLLn(BGBCC_TransState *ctx, ccxl_type bty, ccxl_register *rtreg, char *fn, int ln);
ccxl_status BGBCC_CCXL_RegisterAllocTemporaryInit(BGBCC_TransState *ctx, ccxl_type bty, ccxl_register *rtreg);
ccxl_status BGBCC_CCXL_RegisterAllocTemporaryInt(BGBCC_TransState *ctx, ccxl_register *rtreg);
ccxl_status BGBCC_CCXL_RegisterAllocTemporaryLong(BGBCC_TransState *ctx, ccxl_register *rtreg);
ccxl_status BGBCC_CCXL_RegisterAllocTemporaryFloat(BGBCC_TransState *ctx, ccxl_register *rtreg);
ccxl_status BGBCC_CCXL_RegisterAllocTemporaryDouble(BGBCC_TransState *ctx, ccxl_register *rtreg);
ccxl_status BGBCC_CCXL_RegisterAllocTemporaryPointer(BGBCC_TransState *ctx, ccxl_register *rtreg);
ccxl_status BGBCC_CCXL_RegisterAllocTemporaryMatch(BGBCC_TransState *ctx, ccxl_register reg, ccxl_register *rtreg);
ccxl_status BGBCC_CCXL_RegisterAllocTemporaryMatchInit(BGBCC_TransState *ctx, ccxl_register reg, ccxl_register *rtreg);
ccxl_status BGBCC_CCXL_RegisterCheckRelease(BGBCC_TransState *ctx, ccxl_register reg);
ccxl_status BGBCC_CCXL_RegisterCheckAcquire(BGBCC_TransState *ctx, ccxl_register reg);
ccxl_status BGBCC_CCXL_RegisterIdentEqualP(BGBCC_TransState *ctx, ccxl_register sreg, ccxl_register treg);
//AHSRC:ccxl/ccxl_stack.c
void BGBCC_CCXL_DebugPrintStackLLn(BGBCC_TransState *ctx, char *op, char *file, int line);
ccxl_status BGBCC_CCXL_CheckExpandStack(BGBCC_TransState *ctx);
ccxl_status BGBCC_CCXL_PushRegister(BGBCC_TransState *ctx, ccxl_register reg);
ccxl_status BGBCC_CCXL_PopRegister(BGBCC_TransState *ctx,ccxl_register *rreg);
ccxl_status BGBCC_CCXL_PushURegister(BGBCC_TransState *ctx,ccxl_register reg);
ccxl_status BGBCC_CCXL_PopURegister(BGBCC_TransState *ctx,ccxl_register *rreg);
ccxl_status BGBCC_CCXL_PeekURegister(BGBCC_TransState *ctx,ccxl_register *rreg);
ccxl_status BGBCC_CCXL_PushMark(BGBCC_TransState *ctx);
int BGBCC_CCXL_LookupArgIndex(BGBCC_TransState *ctx, char *name);
int BGBCC_CCXL_LookupLocalIndex(BGBCC_TransState *ctx, char *name);
int BGBCC_CCXL_LookupGlobalIndex(BGBCC_TransState *ctx, char *name);
int BGBCC_CCXL_LookupAsRegister(BGBCC_TransState *ctx,char *name, ccxl_register *rreg);
int BGBCC_CCXL_LookupAsRegisterStore(BGBCC_TransState *ctx,char *name, ccxl_register *rreg);
int BGBCC_CCXL_TryLookupAsRegister(BGBCC_TransState *ctx,char *name, ccxl_register *rreg, bool store);
BGBCC_CCXL_RegisterInfo *BGBCC_CCXL_LookupLocalInfo(BGBCC_TransState *ctx, char *name);
BGBCC_CCXL_RegisterInfo *BGBCC_CCXL_LookupArgInfo(BGBCC_TransState *ctx, char *name);
BGBCC_CCXL_RegisterInfo *BGBCC_CCXL_LookupGlobalInfo(BGBCC_TransState *ctx, char *name);
ccxl_status BGBCC_CCXL_PushLoad(BGBCC_TransState *ctx, char *name);
ccxl_status BGBCC_CCXL_PopStore(BGBCC_TransState *ctx, char *name);
ccxl_status BGBCC_CCXL_StackTransforCallArgs(BGBCC_TransState *ctx);
int BGBCC_CCXL_StackGetCntCallArgs(BGBCC_TransState *ctx);
ccxl_status BGBCC_CCXL_StackCallName(BGBCC_TransState *ctx, char *name);
ccxl_status BGBCC_CCXL_StackPopCall(BGBCC_TransState *ctx);
ccxl_status BGBCC_CCXL_StackLoadIndexConst(BGBCC_TransState *ctx, int idx);
ccxl_status BGBCC_CCXL_StackStoreIndexConst(BGBCC_TransState *ctx, int idx);
ccxl_status BGBCC_CCXL_StackLoadIndexAddrConst(BGBCC_TransState *ctx, int idx);
ccxl_status BGBCC_CCXL_StackLoadIndex(BGBCC_TransState *ctx);
ccxl_status BGBCC_CCXL_StackStoreIndex(BGBCC_TransState *ctx);
ccxl_status BGBCC_CCXL_StackLoadIndexAddr(BGBCC_TransState *ctx);
ccxl_status BGBCC_CCXL_StackDup(BGBCC_TransState *ctx);
ccxl_status BGBCC_CCXL_StackDupClean(BGBCC_TransState *ctx);
ccxl_status BGBCC_CCXL_StackRetV(BGBCC_TransState *ctx);
ccxl_status BGBCC_CCXL_StackRet(BGBCC_TransState *ctx);
ccxl_status BGBCC_CCXL_StackCastBool(BGBCC_TransState *ctx);
ccxl_status BGBCC_CCXL_StackCastSig(BGBCC_TransState *ctx, char *sig);
ccxl_status BGBCC_CCXL_StackBinaryOp(BGBCC_TransState *ctx, char *op);
ccxl_status BGBCC_CCXL_StackUnaryOp(BGBCC_TransState *ctx, char *op);
ccxl_status BGBCC_CCXL_StackBinaryOpStore(BGBCC_TransState *ctx,char *op, char *name);
ccxl_status BGBCC_CCXL_StackUnaryOpName(BGBCC_TransState *ctx,char *op, char *name);
ccxl_status BGBCC_CCXL_StackPushConstInt(BGBCC_TransState *ctx, s32 val);
ccxl_status BGBCC_CCXL_StackPushConstLong(BGBCC_TransState *ctx, s64 val);
ccxl_status BGBCC_CCXL_StackPushConstFloat(BGBCC_TransState *ctx, double val);
ccxl_status BGBCC_CCXL_StackPushConstDouble(BGBCC_TransState *ctx, double val);
ccxl_status BGBCC_CCXL_StackPushConstString(BGBCC_TransState *ctx, char *val);
ccxl_status BGBCC_CCXL_StackPushConstWString(BGBCC_TransState *ctx, char *val);
ccxl_status BGBCC_CCXL_StackPop(BGBCC_TransState *ctx);
ccxl_status BGBCC_CCXL_StackLoadAddr(BGBCC_TransState *ctx, char *name);
ccxl_status BGBCC_CCXL_StackSizeofSig(BGBCC_TransState *ctx, char *sig);
ccxl_status BGBCC_CCXL_StackSizeofVal(BGBCC_TransState *ctx);
ccxl_status BGBCC_CCXL_StackOffsetof(BGBCC_TransState *ctx,char *sig, char *name);
ccxl_status BGBCC_CCXL_StackLoadSlot(BGBCC_TransState *ctx, char *name);
ccxl_status BGBCC_CCXL_StackStoreSlot(BGBCC_TransState *ctx, char *name);
ccxl_status BGBCC_CCXL_StackLoadSlotAddr(BGBCC_TransState *ctx, char *name);
ccxl_status BGBCC_CCXL_StackBeginU(BGBCC_TransState *ctx, char *sig);
ccxl_status BGBCC_CCXL_StackEndU(BGBCC_TransState *ctx);
ccxl_status BGBCC_CCXL_StackSetU(BGBCC_TransState *ctx);
ccxl_status BGBCC_CCXL_StackInitVar(BGBCC_TransState *ctx, char *name);
ccxl_status BGBCC_CCXL_StackInitVarValue(BGBCC_TransState *ctx, char *name);
//AHSRC:ccxl/ccxl_struct.c
BGBCC_CCXL_LiteralInfo *BGBCC_CCXL_LookupStructureForType(BGBCC_TransState *ctx, ccxl_type ty);
BGBCC_CCXL_LiteralInfo *BGBCC_CCXL_LookupStructureForSig(BGBCC_TransState *ctx, char *sig);
BGBCC_CCXL_LiteralInfo *BGBCC_CCXL_LookupStructureForSig2(BGBCC_TransState *ctx, char *sig);
int BGBCC_CCXL_LookupStructureIDForSig(BGBCC_TransState *ctx, char *sig);
BGBCC_CCXL_LiteralInfo *BGBCC_CCXL_LookupStructureForType(BGBCC_TransState *ctx, ccxl_type type);
int BGBCC_CCXL_LookupStructureIDForType(BGBCC_TransState *ctx, ccxl_type type);
int BGBCC_CCXL_LookupStructContainsFieldID(BGBCC_TransState *ctx, BGBCC_CCXL_LiteralInfo *st, char *name);
int BGBCC_CCXL_LookupStructFieldID(BGBCC_TransState *ctx, BGBCC_CCXL_LiteralInfo *st, char *name);
ccxl_status BGBCC_CCXL_LookupStructFieldType(BGBCC_TransState *ctx, BGBCC_CCXL_LiteralInfo *st, char *name, ccxl_type *rty);
ccxl_status BGBCC_CCXL_LookupStructFieldIdType(BGBCC_TransState *ctx, BGBCC_CCXL_LiteralInfo *st, int idx, ccxl_type *rty);
int BGBCC_CCXL_GetArraySizeForSig(BGBCC_TransState *ctx, char *sig);
int BGBCC_CCXL_GetArraySizeForSig2(BGBCC_TransState *ctx, char *sig);
int BGBCC_CCXL_GetArraySizeForSig2R(BGBCC_TransState *ctx, char **rsig);
int BGBCC_CCXL_GetArraySizeForSig3R(BGBCC_TransState *ctx, char **rsig);
ccxl_status BGBCC_CCXL_GetStructSigFixedSize(BGBCC_TransState *ctx, char *sig, int *rsz);
ccxl_status BGBCC_CCXL_GetSigFixedSize(BGBCC_TransState *ctx, char *sig, int *rsz);
char *BGBCC_CCXL_SigGetReturnSig(BGBCC_TransState *ctx, char *sig);
ccxl_status BGBCC_CCXL_GetStructSigMinMaxSize(BGBCC_TransState *ctx, char *sig, int *rsz, int *ral);
ccxl_status BGBCC_CCXL_GetSigMinMaxSize(BGBCC_TransState *ctx, char *sig, int *rsz, int *ral);
ccxl_status BGBCC_CCXL_MarkTypeAccessed(BGBCC_TransState *ctx, ccxl_type type);
//AHSRC:ccxl/ccxl_trace.c
BGBCC_CCXL_VirtOp *BGBCC_CCXL_AllocVirtOp(BGBCC_TransState *ctx);
BGBCC_CCXL_VirtTr *BGBCC_CCXL_AllocVirtTr(BGBCC_TransState *ctx);
int BGBCC_CCXL_AddVirtOp(BGBCC_TransState *ctx, BGBCC_CCXL_VirtOp *op);
int BGBCC_CCXL_AddVirtTr(BGBCC_TransState *ctx, BGBCC_CCXL_VirtTr *tr);
int BGBCC_CCXL_EmitMarkEndTrace(BGBCC_TransState *ctx);
//AHSRC:ccxl/ccxl_type.c
bool BGBCC_CCXL_TypeSmallIntP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeSmallLongP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeUnsignedP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeIntP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeLongP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeUnsignedIntP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeUnsignedLongP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeFloatP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeDoubleP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeBaseILFD_P(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeBaseSmallILFD_P(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeBaseSmallILFDP_P(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeBaseSmallIL_P(BGBCC_TransState *ctx, ccxl_type ty);
int BGBCC_CCXL_GetTypeBaseType(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypePointerP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeArrayP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeArrayOrPointerP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeSignedByteP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeUnsignedByteP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeSignedShortP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeUnsignedShortP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeVoidP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeEqualP(BGBCC_TransState *ctx, ccxl_type dty, ccxl_type sty);
bool BGBCC_CCXL_TypeBaseEqualP(BGBCC_TransState *ctx, ccxl_type dty, ccxl_type sty);
bool BGBCC_CCXL_TypeBaseSmallEqualP(BGBCC_TransState *ctx, ccxl_type dty, ccxl_type sty);
bool BGBCC_CCXL_TypeOprBasicP(BGBCC_TransState *ctx, ccxl_type ty);
int BGBCC_CCXL_TypeObjectLiteralIndex(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeFunctionP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeValueObjectP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeIsObjectP(BGBCC_TransState *ctx, ccxl_type ty);
int BGBCC_CCXL_TypeAsOprBasic(BGBCC_TransState *ctx, ccxl_type ty);
int BGBCC_CCXL_TypeAsOprExtBasic(BGBCC_TransState *ctx, ccxl_type ty);
int BGBCC_CCXL_TypeGetLogicalBaseSize(BGBCC_TransState *ctx, ccxl_type ty);
int BGBCC_CCXL_TypeGetLogicalBaseShift(BGBCC_TransState *ctx, ccxl_type ty);
int BGBCC_CCXL_TypeGetLogicalSize(BGBCC_TransState *ctx, ccxl_type ty);
ccxl_status BGBCC_CCXL_TypeDerefType(BGBCC_TransState *ctx, ccxl_type sty, ccxl_type *rdty);
ccxl_status BGBCC_CCXL_TypePointerType(BGBCC_TransState *ctx, ccxl_type sty, ccxl_type *rdty);
ccxl_status BGBCC_CCXL_TypeAutoPromoteType(BGBCC_TransState *ctx, ccxl_type sty, ccxl_type *rdty);
int BGBCC_CCXL_TypeGetArraySize(BGBCC_TransState *ctx, ccxl_type sty);
int BGBCC_CCXL_TypeArrayAdjustSize(BGBCC_TransState *ctx, ccxl_type sty, ccxl_type *rdty, int newsz);
int BGBCC_CCXL_TypeUnpackOverflow(BGBCC_TransState *ctx, ccxl_type ty, BGBCC_CCXL_TypeOverflow *rovf);
int BGBCC_CCXL_TypeIndexOverflow(BGBCC_TransState *ctx, BGBCC_CCXL_TypeOverflow ovf);
ccxl_status BGBCC_CCXL_TypeFromOverflow(BGBCC_TransState *ctx, ccxl_type *rty, BGBCC_CCXL_TypeOverflow ovf);
ccxl_status BGBCC_CCXL_TypeFromSig(BGBCC_TransState *ctx, ccxl_type *rty, char *sig);
char *BGBCC_CCXL_TypeGetSig(BGBCC_TransState *ctx, ccxl_type ty);
ccxl_type BGBCC_CCXL_TypeWrapBasicType(int ty);
bool BGBCC_CCXL_TypeSupportsOperatorP(BGBCC_TransState *ctx, ccxl_type ty, int opr);
ccxl_status BGBCC_CCXL_GetTypeBinaryDest(BGBCC_TransState *ctx, int opr, ccxl_type lty, ccxl_type rty, ccxl_type *rdty);
ccxl_status BGBCC_CCXL_GetTypeCompareBinaryDest(BGBCC_TransState *ctx, int opr, ccxl_type lty, ccxl_type rty, ccxl_type *rdty);
//AHSRC:shcc/shx_binop.c
int BGBCC_SHXC_EmitBinaryVRegVRegInt(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register treg);
int BGBCC_SHXC_EmitBinaryVRegVRegVRegInt(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg, ccxl_register treg);
int BGBCC_SHXC_EmitBinaryVRegVRegVReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg, ccxl_register treg);
int BGBCC_SHXC_EmitUnaryVRegVRegInt(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg);
int BGBCC_SHXC_EmitUnaryVRegVReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg);
int BGBCC_SHXC_EmitCompareVRegVRegVRegInt(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, int cmp, ccxl_register sreg, ccxl_register treg);
int BGBCC_SHXC_EmitCompareVRegVRegVReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg, ccxl_register treg);
int BGBCC_SHXC_EmitReturnVoid(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_SHXC_EmitReturnVReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register sreg);
int BGBCC_SHXC_EmitCsrvVReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg);
int BGBCC_SHXC_EmitCallFcnVReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register fcn);
int BGBCC_SHXC_EmitCallName(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, char *name);
int BGBCC_SHXC_EmitCallVReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register fcn, int narg, ccxl_register *args);
//AHSRC:shcc/shx_cgif.c
int BGBCC_SHX_InitIface();
ccxl_status BGBCC_SHXC_SetupContextForArch(BGBCC_TransState *ctx);
bool BGBCC_SHXC_TypeIntRegP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_SHXC_TypeInt2RegP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_SHXC_TypeFloatRegP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_SHXC_TypeFloat2RegP(BGBCC_TransState *ctx, ccxl_type ty);
int BGBCC_SHXC_TypeGetRegClassP(BGBCC_TransState *ctx, ccxl_type ty);
int BGBCC_SHXC_SetupFrameLayout(BGBCC_TransState *ctx,BGBCC_SHX_Context *sctx, BGBCC_CCXL_LiteralInfo *obj);
int BGBCC_SHXC_EmitFrameProlog(BGBCC_TransState *ctx,BGBCC_SHX_Context *sctx, BGBCC_CCXL_LiteralInfo *obj);
int BGBCC_SHXC_EmitFrameEpilog(BGBCC_TransState *ctx,BGBCC_SHX_Context *sctx, BGBCC_CCXL_LiteralInfo *obj);
ccxl_status BGBCC_SHXC_CompileVirtOp(BGBCC_TransState *ctx,BGBCC_SHX_Context *sctx, BGBCC_CCXL_LiteralInfo *obj, BGBCC_CCXL_VirtOp *op);
ccxl_status BGBCC_SHXC_CompileVirtTr(BGBCC_TransState *ctx,BGBCC_SHX_Context *sctx, BGBCC_CCXL_LiteralInfo *obj, BGBCC_CCXL_VirtTr *tr);
ccxl_status BGBCC_SHXC_EndFunction(BGBCC_TransState *ctx,BGBCC_CCXL_LiteralInfo *obj);
ccxl_status BGBCC_SHXC_BuildFunction(BGBCC_TransState *ctx,BGBCC_CCXL_LiteralInfo *obj);
ccxl_status BGBCC_SHXC_BuildGlobal(BGBCC_TransState *ctx,BGBCC_CCXL_LiteralInfo *obj);
int BGBCC_SHXC_LookupLabelIndex(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int lblid);
ccxl_status BGBCC_SHXC_ApplyImageRelocs(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, byte *imgbase);
ccxl_status BGBCC_SHXC_FlattenImageELF(BGBCC_TransState *ctx,byte *obuf, int *rosz, fourcc imgfmt);
ccxl_status BGBCC_SHXC_FlattenImage(BGBCC_TransState *ctx,byte *obuf, int *rosz, fourcc imgfmt);
//AHSRC:shcc/shx_conv.c
int BGBCC_SHXC_EmitConvVRegVReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type dtype, ccxl_type stype, ccxl_register dreg, ccxl_register sreg);
//AHSRC:shcc/shx_emit.c
BGBCC_SHX_Context *BGBCC_SHX_AllocContext();
int BGBCC_SHX_SetSectionName(BGBCC_SHX_Context *ctx, char *name);
int BGBCC_SHX_SetSection(BGBCC_SHX_Context *ctx, int sec);
int BGBCC_SHX_EmitByte(BGBCC_SHX_Context *ctx, int val);
int BGBCC_SHX_EmitWord(BGBCC_SHX_Context *ctx, int val);
int BGBCC_SHX_EmitDWord(BGBCC_SHX_Context *ctx, u32 val);
int BGBCC_SHX_EmitQWord(BGBCC_SHX_Context *ctx, s64 val);
int BGBCC_SHX_EmitString(BGBCC_SHX_Context *ctx, char *str);
int BGBCC_SHX_EmitAscii(BGBCC_SHX_Context *ctx, char *str);
int BGBCC_SHX_EmitRawBytes(BGBCC_SHX_Context *ctx, byte *buf, int sz);
byte *BGBCC_SHX_EmitGetPos(BGBCC_SHX_Context *ctx);
int BGBCC_SHX_EmitGetOffs(BGBCC_SHX_Context *ctx);
int BGBCC_SHX_EmitBAlign(BGBCC_SHX_Context *ctx, int al);
byte *BGBCC_SHX_EmitGetPosForOffs(BGBCC_SHX_Context *ctx, int ofs);
int BGBCC_SHX_EmitGetOffsWord(BGBCC_SHX_Context *ctx, int ofs);
int BGBCC_SHX_EmitSetOffsWord(BGBCC_SHX_Context *ctx, int ofs, int val);
int BGBCC_SHX_GenLabelTemp(BGBCC_SHX_Context *ctx);
int BGBCC_SHX_GenLabel(BGBCC_SHX_Context *ctx);
int BGBCC_SHX_EmitLabel(BGBCC_SHX_Context *ctx, int lblid);
int BGBCC_SHX_EmitRelocTy(BGBCC_SHX_Context *ctx, int lblid, int ty);
int BGBCC_SHX_EmitRelocRel8(BGBCC_SHX_Context *ctx, int lbl);
int BGBCC_SHX_EmitRelocRel16(BGBCC_SHX_Context *ctx, int lbl);
int BGBCC_SHX_EmitRelocRel32(BGBCC_SHX_Context *ctx, int lbl);
int BGBCC_SHX_EmitRelocAbs8(BGBCC_SHX_Context *ctx, int lbl);
int BGBCC_SHX_EmitRelocAbs16(BGBCC_SHX_Context *ctx, int lbl);
int BGBCC_SHX_EmitRelocAbs32(BGBCC_SHX_Context *ctx, int lbl);
int BGBCC_SHX_EmitRelocAbs64(BGBCC_SHX_Context *ctx, int lbl);
int BGBCC_SHX_EmitRelocRelW12(BGBCC_SHX_Context *ctx, int lbl);
int BGBCC_SHX_EmitOpNone(BGBCC_SHX_Context *ctx, int nmid);
int BGBCC_SHX_EmitOpReg(BGBCC_SHX_Context *ctx, int nmid, int reg);
int BGBCC_SHX_EmitOpImm(BGBCC_SHX_Context *ctx, int nmid, int imm);
int BGBCC_SHX_EmitOpMReg(BGBCC_SHX_Context *ctx, int nmid, int reg);
int BGBCC_SHX_EmitOpLabel(BGBCC_SHX_Context *ctx, int nmid, int lbl);
int BGBCC_SHX_EmitOpNear12Label(BGBCC_SHX_Context *ctx, int nmid, int lbl);
int BGBCC_SHX_EmitOpFarLabel(BGBCC_SHX_Context *ctx, int nmid, int lbl);
int BGBCC_SHX_EmitOpAutoLabel(BGBCC_SHX_Context *ctx, int nmid, int lbl);
int BGBCC_SHX_EmitOpRegReg(BGBCC_SHX_Context *ctx, int nmid, int rm, int rn);
int BGBCC_SHX_EmitOpRegStReg(BGBCC_SHX_Context *ctx, int nmid, int rm, int rn);
int BGBCC_SHX_EmitOpLdRegReg(BGBCC_SHX_Context *ctx, int nmid, int rm, int rn);
int BGBCC_SHX_EmitOpRegStDecReg(BGBCC_SHX_Context *ctx,int nmid, int rm, int rn);
int BGBCC_SHX_EmitOpLdIncRegReg(BGBCC_SHX_Context *ctx,int nmid, int rm, int rn);
int BGBCC_SHX_EmitOpRegStRegDisp(BGBCC_SHX_Context *ctx, int nmid, int rm, int rn, int disp);
int BGBCC_SHX_EmitOpLdRegDispReg(BGBCC_SHX_Context *ctx,int nmid, int rm, int disp, int rn);
int BGBCC_SHX_EmitOpRegStReg2(BGBCC_SHX_Context *ctx, int nmid, int rm, int ro, int rn);
int BGBCC_SHX_EmitOpLdReg2Reg(BGBCC_SHX_Context *ctx, int nmid, int rm, int ro, int rn);
int BGBCC_SHX_EmitOpRegImm(BGBCC_SHX_Context *ctx, int nmid, int reg, int imm);
int BGBCC_SHX_EmitIndexAddImm16(BGBCC_SHX_Context *ctx, int imm);
int BGBCC_SHX_EmitIndexAddImm32(BGBCC_SHX_Context *ctx, int imm);
int BGBCC_SHX_EmitIndexAddImm32LblOfs(BGBCC_SHX_Context *ctx, int lbl, int ofs);
int BGBCC_SHX_EmitLoadRegImm(BGBCC_SHX_Context *ctx, int nmid, int reg, s32 imm);
int BGBCC_SHX_EmitLoadRegLabelRel(BGBCC_SHX_Context *ctx, int reg, int lbl, int ofs);
int BGBCC_SHX_EmitFlushIndexImm16(BGBCC_SHX_Context *ctx);
int BGBCC_SHX_EmitFlushIndexImm32(BGBCC_SHX_Context *ctx);
int BGBCC_SHX_EmitCheckFlushIndexImmP(BGBCC_SHX_Context *ctx);
int BGBCC_SHX_EmitCheckFlushIndexImm(BGBCC_SHX_Context *ctx);
//AHSRC:shcc/shx_ldix.c
int BGBCC_SHXC_EmitLdixVRegVRegImm(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg, s32 imm);
int BGBCC_SHXC_EmitLdixVRegVRegVReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg, ccxl_register treg);
int BGBCC_SHXC_EmitStixVRegVRegImm(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg, s32 imm);
int BGBCC_SHXC_EmitStixVRegVRegVReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg, ccxl_register treg);
int BGBCC_SHXC_EmitLeaVRegVRegImm(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg, s32 imm);
int BGBCC_SHXC_EmitLeaVRegVRegVReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg, ccxl_register treg);
int BGBCC_SHXC_EmitLdaVRegVReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg);
int BGBCC_SHXC_EmitDiffPtrVRegVRegVReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg, ccxl_register treg);
//AHSRC:shcc/shx_register.c
int BGBCC_SHXC_EmitLoadFrameOfsReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int ofs, int dreg);
int BGBCC_SHXC_EmitStoreFrameOfsReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int ofs, int dreg);
int BGBCC_SHXC_EmitLdaFrameOfsReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int ofs, int dreg);
int BGBCC_SHXC_EmitStoreStackOfsReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int ofs, int dreg);
int BGBCC_SHXC_EmitLoadBRegOfsReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int nmid, int breg, int ofs, int dreg);
int BGBCC_SHXC_EmitStoreBRegOfsReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int nmid, int breg, int ofs, int dreg);
int BGBCC_SHXC_EmitLeaBRegOfsReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int nmid, int breg, int ofs, int dreg);
int BGBCC_SHXC_EmitLoadBRegIRegScReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int nmid, int breg, int ireg, int sc, int dreg);
int BGBCC_SHXC_EmitStoreBRegIRegScReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int nmid, int breg, int ireg, int sc, int dreg);
int BGBCC_SHXC_EmitLeaBRegIRegScReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int nmid, int breg, int ireg, int sc, int dreg);
int BGBCC_SHXC_SaveFrameOfsForReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int reg);
int BGBCC_SHXC_EmitSaveFrameReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int reg);
int BGBCC_SHXC_GetGblIndexGotIndex(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int gblidx);
int BGBCC_SHXC_GetVRegGotIndex(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register sreg);
int BGBCC_SHXC_GetGblNameGotIndex(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, char *name);
int BGBCC_SHXC_EmitLoadGblNameReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, char *name, int dreg);
int BGBCC_SHXC_EmitLoadFrameVRegReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register sreg, int dreg);
int BGBCC_SHXC_EmitStoreFrameVRegReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register dreg, int sreg);
int BGBCC_SHXC_EmitLdaFrameVRegReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register sreg, int dreg);
int BGBCC_SHXC_EmitTryGetRegister(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register reg, int fl);
int BGBCC_SHXC_EmitGetRegister(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register reg, int fl);
int BGBCC_SHXC_EmitGetRegisterDirty(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register reg);
int BGBCC_SHXC_EmitGetRegisterWrite(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register reg);
int BGBCC_SHXC_EmitGetRegisterRead(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register reg);
int BGBCC_SHXC_EmitTryGetRegisterDirty(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register reg);
int BGBCC_SHXC_EmitTryGetRegisterWrite(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register reg);
int BGBCC_SHXC_EmitTryGetRegisterRead(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register reg);
int BGBCC_SHXC_EmitReleaseRegister(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register reg);
int BGBCC_SHXC_EmitLoadVRegReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register sreg, int dreg);
int BGBCC_SHXC_EmitStoreVRegReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register dreg, int sreg);
int BGBCC_SHXC_EmitMovVRegVReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg);
int BGBCC_SHXC_EmitMovVRegImm(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, s32 imm);
int BGBCC_SHXC_EmitOpNmidVRegVReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, int nmid, ccxl_register dreg, ccxl_register sreg);
int BGBCC_SHXC_EmitJCmpVRegVReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register sreg, ccxl_register treg, int cmp, int lbl);
int BGBCC_SHXC_EmitJCmpVRegZero(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register sreg, int cmp, int lbl);
//AHSRC:shcc/shx_struct.c
//AHSRC:mm/inflate.c
int PDUNZ_ReadBit();
int PDUNZ_Read2Bits();
int PDUNZ_Read3Bits();
int PDUNZ_Read4Bits();
int PDUNZ_Read5Bits();
int PDUNZ_ReadNBits(int n);
void PDUNZ_SkipNBits(int n);
int PDUNZ_PeekWord();
void PDUNZ_AlignByte();
int PDUNZ_ReadAlignedByte();
int PDUNZ_ReadAlignedWord();
int PDUNZ_TransposeByte(int v);
int PDUNZ_TransposeWord(int v);
int PDUNZ_SetupTable(byte *cl, int ncl,u16 *tc, u16 *tm, byte *tl, u16 *ti, u16 *tn);
int PDUNZ_SetupStatic();
int PDUNZ_DecodeSymbol();
int PDUNZ_DecodeDistance();
int PDUNZ_DecodeCodeLengths(byte *cl, int ncl);
int PDUNZ_DecodeHeader();
int PDUNZ_DecodeRun(int sym);
int PDUNZ_DecodeBlockData();
int PDUNZ_DecodeBlock();
int PDUNZ_DecodeStream(byte *ibuf, byte *obuf, int isz, int osz);
//AHSRC:mm/deflate.c
void PDZ2_WriteBit(int i);
void PDZ2_Write2Bits(int i);
void PDZ2_Write3Bits(int i);
void PDZ2_Write4Bits(int i);
void PDZ2_Write5Bits(int i);
void PDZ2_WriteNBits(int i, int n);
void PDZ2_FlushBits();
int PDZ2_BalanceTree_r(short *nodes, short *nlen, int root, int h, int ml);
void PDZ2_CalcLengths_r(short *nodes, byte *cl, int root, int h);
void PDZ2_BuildLengths(int *stat, int nc, byte *cl, int ml);
void PDZ2_UpdateWindowByte(byte *s);
void PDZ2_UpdateWindowString(byte *s, int l);
void PDZ2_FlushWindow();
int PDZ2_LookupString(byte *cs, byte *ce, int *rl, int *rd);
int PDZ2_LZCompressBuffer(byte *ibuf, byte *obuf, byte *mbuf, int sz);
void PDZ2_StatLZRun(byte *cs, int *lstat, int *dstat);
void PDZ2_StatLZBuffer(byte *tbuf, byte *mbuf, int n,int *lstat, int *dstat);
void PDZ2_StatLengths(byte *cl, int nc, int *stat);
void PDZ2_EncodeSymbol(int v);
void PDZ2_EncodeLengths(byte *cl, int nc);
void PDZ2_EncodeLZRun(byte *cs);
void PDZ2_EncodeLZBuffer(byte *tbuf, byte *mbuf, int n);
int PDZ2_EncodeBlockStatic(byte *ibuf, int isz, int last);
int PDZ2_EncodeBlock(byte *ibuf, int isz, int last);
int PDZ2_EncodeStream_I(byte *ibuf, byte *obuf, int isz, int osz);
int PDZ2_EncodeStream(byte *ibuf, byte *obuf, int isz, int osz);
int PDZ2_EncodeStream64(byte *ibuf, byte *obuf, int isz, int osz);
int PDZ2_EncodeStreamLvl(byte *ibuf, byte *obuf, int isz, int osz, int l);
//AHSRC:mm/cc_exwad.c
u16 exwad_getu16(byte *b);
u32 exwad_getu32(byte *b);
void exwad_setu16(byte *b, u16 a);
void exwad_setu32(byte *b, u32 a);
u32 ExWAD_CRC32(void *buf, int sz, u32 lcrc);
void ExWAD_StoreImage(char *name, ExWAD_Context *ctx);
int ExWAD_SaveImage(ExWAD_Context *ctx);
ExWAD_Context *ExWAD_LoadImage(char *name);
ExWAD_Context *ExWAD_LoadImageBuffer(char *name, byte *buf, int sz);
void ExWAD_MarkRangeResv(ExWAD_Context *ctx, int base, int sz);
void ExWAD_MarkRangeUsed(ExWAD_Context *ctx, int base, int sz);
void ExWAD_MarkRangeFree(ExWAD_Context *ctx, int base, int sz);
void ExWAD_CheckExpandImage(ExWAD_Context *img, int sz);
int ExWAD_FindFreeRange(ExWAD_Context *ctx, int sz);
int ExWAD_AllocRange(ExWAD_Context *ctx, int sz);
int ExWAD_FindLastCell(ExWAD_Context *ctx);
void ExWAD_FixupEXE(ExWAD_Context *ctx);
void ExWAD_FixupImage(ExWAD_Context *ctx);
int ExWAD_Hash16(void *buf, int szbuf);
ExWAD_Context *ExWAD_LoadImage2(char *name);
ExWAD_Context *ExWAD_LoadImageBufferRead(char *name, byte *buf, int sz);
int ExWAD_GetDirEntIndexName(ExWAD_Context *ctx,int idx, char *nbuf);
int ExWAD_LookupDirEnt(ExWAD_Context *ctx, char *name);
void ExWAD_CheckExpandDir(ExWAD_Context *ctx, int num);
int ExWAD_GetStringRVA(ExWAD_Context *ctx, char *str);
int ExWAD_GetDirEnt(ExWAD_Context *ctx, char *name);
byte *ExWAD_LoadFile(ExWAD_Context *ctx, char *name, int *rsz);
void ExWAD_StoreFile(ExWAD_Context *ctx, char *name, byte *buf, int sz);
void ExWAD_AddFile(ExWAD_Context *ctx, char *name);
//AHSRC:mm/ccl_context.c
BGBCC_Object *BGBCC_NewContext();
int BGBCC_DestroyContext(BGBCC_Object *ctx);
void BGBCC_EmitLabelPos(BGBCC_Object *ctx, char *name, int pos);
void BGBCC_EmitGotoPos(BGBCC_Object *ctx, char *name, int ty, int pos);
//AHSRC:mm/ccl_coff.c
int BGBCC_COFF_ResolveRelocs(BGBCC_Object *ctx, BGBCC_COFF_Info *inf, int sec,int offs, int cnt);
BGBCC_Object *BGBCC_COFF_LoadObjectBuf(char *name, byte *buf, int sz);
BGBCC_Object *BGBCC_COFF_LoadObject(char *name);
int BGBCC_COFF_LoadLibraryBuf(char *name, byte *buf, int sz);
int BGBCC_COFF_LoadLibrary(char *name);
int BGBCC_COFF_LoadLibrary(char *name);
void bgbcc_coff_set16(byte *ptr, int i);
void bgbcc_coff_set32(byte *ptr, int i);
int bgbcc_coff_get16(byte *ptr);
int bgbcc_coff_get32(byte *ptr);
int bgbcc_coff_idxstr(char *strs, char *str);
int bgbcc_coff_idxstr2(char *strs, char *str, int fl);
int BGBCC_COFF_StoreObjectBuf(BGBCC_Object *ctx, byte *buf, int msz);
int BGBCC_COFF_StoreObject(char *name, BGBCC_Object *ctx);
byte *BGBCC_COFF_EncodeObject(BGBCC_Object *ctx, int *rsz);
//AHSRC:mm/ccl_elf.c
BGBCC_Object *BGBCC_ELF_LoadObjectBuf(char *name, byte *buf, int sz);
//AHSRC:mm/dyll_metapath.c
BGBDYC_MetaNode *DYLL_MetaPath_LookupNodeR(BGBDYC_MetaNode *node, char *path);
BGBDYC_MetaNode *DYLL_MetaPath_GetNodeR(BGBDYC_MetaNode *node, char *path);
int DYLL_MetaPath_AdjustBiDepth(BGBDYC_MetaBiNode *node);
int DYLL_MetaPath_BalanceBiNode(BGBDYC_MetaBiNode *node);
BGBDYC_MetaNode *DYLL_MetaPath_GetNodeR2(BGBDYC_MetaBiNode *node, char *name);
BGBDYC_MetaNode *DYLL_MetaPath_GetNodeR(BGBDYC_MetaNode *node, char *path);
BGBDYC_MetaNode *DYLL_MetaPath_LookupNode(char *path);
BGBDYC_MetaNode *DYLL_MetaPath_GetNode(char *path);
BGBDYC_MetaLeaf *DYLL_MetaPath_LookupNodeLeaf(BGBDYC_MetaNode *node, char *key);
BGBDYC_MetaLeaf *DYLL_MetaPath_GetNodeLeaf(BGBDYC_MetaNode *node, char *key);
void DYLL_MetaPath_SplitKey(char *path, char *nb, char *kb);
char *DYLL_MetaPath_LookupKey(char *path);
void DYLL_MetaPath_BindKey(char *path, char *val);
void DYLL_MetaPath_LoadDB(char *name);
void DYLL_MetaPath_SaveNode(FILE *fd,BGBDYC_MetaNode *node, char *path, int ind);
void DYLL_MetaPath_SaveDB(char *name);
char *DYLL_MetaPath_SaveNodeBuffer(char *obuf,BGBDYC_MetaNode *node, char *path, int ind);
int DYLL_MetaPath_SaveDBBuffer(char *obuf, int szbuf);
void dyllMetaInit();
void dyllMetaCommit();
void dyllMetaBindKey(char *key, char *val);
char *dyllMetaLookupKey(char *key);
//AHSRC:mm/dyll_metabin.c
void DYLL_MetaBin_EmitByte(BGBDYC_MetaBinary *ctx, int val);
void DYLL_MetaBin_EmitVLI(BGBDYC_MetaBinary *ctx, int val);
void DYLL_MetaBin_EmitSVLI(BGBDYC_MetaBinary *ctx, int val);
void DYLL_MetaBin_EncodeString(BGBDYC_MetaBinary *ctx, char *str);
void DYLL_MetaBin_SaveBinaryNode(BGBDYC_MetaBinary *ctx, BGBDYC_MetaNode *node);
byte *DYLL_MetaBin_SaveBinaryBuf(char *name, int *rsz);
//AHSRC:bgbmeta.c
char *BGBCP_LookupSig(BGBCP_ParseState *ctx, char *name);
char *BGBCP_LookupTypeSig(BGBCP_ParseState *ctx, char *name);
char *BGBCP_LookupPPKey(BGBCP_ParseState *ctx, char *name);
int BGBCC_BindPPKey(BGBCP_ParseState *ctx, char *name, char *sig);
int BGBCC_StoreTextFile(char *name, char *buf);
int BGBCC_StoreFile(char *name, void *buf, int sz);
int bgbcc_storefile(char *name, void *buf, int sz);
char *bgbcc_loadfile(char *name, int *rsz);
int BGBCC_LoadCMeta(char *name);
BCCX_Node *BGBCC_LoadCSourceAST(char *name);
int BGBCC_LoadCSourcesCCXL(char **names, int nnames, byte *obuf, int *rsz, fourcc imgfmt);
u32 BGBCC_GetArch();
u32 BGBCC_GetSubArch();
int BGBCC_LoadConfig(char *name);
int BGBCC_InitEnv(int argc, char **argv, char **env);
int BGBCC_Init();
void ccAddInclude(char *path);
void ccAddLibrary(char *path);
void ccAddSource(char *path);
void ccAddDefineString(char *str);
int main(int argc, char *argv[], char **env);
